; Bally Midway Tron data file for z80dasm
; Tron 8/9 ROMs used by MAME (labelled as tron)
; please send additions/changes to Franklin <at> FranklinBowen <dot> net
; look for newest files at http://www.FranklinBowen.net

; date 2020-11-11

; o Remarks - these are lines beginning with a semi-colon (;) they are completely ignored.
; o 1 ORG line - gives the origin of the code; this is the startingaddress to be used for the disassembly.
; o COMMENT lines - used to add comments to the end of lines of the disassembly.
; o COMMENTLINE lines - provide full-line comments to be included before a given address in the disassembly.
; o DATA lines - mark sections as data.  These sections will not be disassembled, but dumped as hex data instead.
; o ASCII lines - mark sections as text.  These sections will not be disassembled, but printed as text instead.
;
; current limitations:
; o number of LABEL, DATA/ASCII, COMMENT and COMMENTLINE lines determined at compile-time - see MAXLABEL, MAXDATA, MAXCOMMENT and MAXCOMMLINE
; o all DATA/ASCII lines in data file must be sorted in ascending address order
; o ditto for COMMENT and COMMENTLINE lines
; o if a DATA/ASCII area is preceded by what Z80dasm thinks is code that continues into the DATA/ASCII area, the data will not be marked
;   as such, and an error will be printed.  If this is the case, mark the line before the data as data also.

label 0000 IO_0
label 0001 IO_1
label 0002 IO_2
label 0003 IO_3
label 0004 IO_4
label 0007 IO_AUDIO_STATUS
label 001C IO_AUDIO_LATCHES
label 00E0 IO_WATCHDOG_RESET
label 00E8 IO_UNKNOWN_WRITTEN_AT_INITIALIZATION
label 00F0 IO_CTC



label 0401 STRING_IN_DE_TO_HL
label 04b0 DEFAULT_HIGH_SCORE_TABLE
label 0557 OUTPUT_TO_SOUND_LATCHES
label 06ca PRINT_OUT_MESSAGES_IN_QUEUES
label 06f5 PRINT_OUT_MESSAGES_IN_QUEUE_2
label 0792 OUTPUT_IO_TOWER_TIMER
label 0825 UPDATE_GAME_SELECT_COUNTDOWN_TIMER_FROM_DE
label 01cb SERVICE_INTERRUPT_ROUTINE
label 1f97 START_GAME
label 20a7 VECTOR_OF_DIFFICULTY_TO_HARDNESS_MAPS
label 2115 INITIALIZE_LEVEL?
label 234A BACKGROUND_PICK_A_GAME
label 2c7e MCP_INSTRUCTIONS
label 2d12 PLAY_MCP
label 3a00 PLAY_TANKS
label 3cdf TANKS_INSTRUCTIONS
label 4f7e TANK_DATA_FOR_?
label 5000 PLAY_LIGHT_CYCLE
label 5103 LIGHT_CYCLE_INSTRUCTIONS
label 5d00 PLAY_IO_TOWER
label 5e36 IO_TOWER_INSTRUCTIONS
label 5f23 CONVERT_IO_TOWER_TIMER_TO_PRINTABLE_AND_?
label 6065 INITIALIZE_TRON_SPRITE_FOR_MCP_AND_IO_TOWER
label 6b39 JOYSTICK_INPUT_TABLE
label 6f00 ADD_A_TO_HL_WITH_CARRY
label 6f05 PSEUDO_RANDOM_VALUE_IN_C47A?
label 6f17 RESET_WATCHDOG_UNTIL_C400_IS_ONE
label 6f2d COPY_10_FROM_HL_TO_FFC0
label 6f35 COPY_20_FROM_HL_TO_FF80
label 6fb8 PUT_C_ON_STACK_TO_SEND_TO_AUDIO
label 6fc7 CLEAR_BACKGROUND
label 7020 ZERO_RAM_C000-C418
label 7026 ZERO_RAM_C000-C450
label 7035 COPY_0780_BYTES_FROM_HL_TO_BACKGROUND_RAM(F800)
label 7049 INITIALIZE_SPRITES
label 707e ADD_MESSAGE_TO_MESSAGE_QUEUE_2
label 709f PROCESS_GAME_SELECT_COUNTDOWN_TIMER
label 70ac PUT_GAME_SELECT_COUNTDOWN_DIGIT_MESSAGE_IN_Q2
label 70cd GAME_SELECT_COUNTDOWN_DIGITS
label 7159 RETURN_C687-7_IF_NZ_IN_A
label 7165 RETURN_C687-2_IF_NZ_IN_A
label 7200 BACKGROUND_TANK_GAME
label 7980 COLOR_PALETTE_FOR_TANKS_GAME
label 7a00 BACKGROUND_IO_TOWER_GAME
label 8900 BACKGROUND_LIGHT_CYCLE
label 9100 BACKGROUND_TRAINING_FOR_LIGHT_CYCLE
label b126 VECTOR_OF_USER_LEVEL_STRINGS

label c00d IO_TOWER_TIMER_VALUE_REVERSED_TO_C010
label c00e INFINITE_TIME_CHEAT
label c012 IO_TOWER_TIMER_DIGITS_TO_C019
label c029 JOYSTICK_INPUT_ARRAY_TO_C02C
label c051 INFO_FOR_TANK_GAME_SEE_3ABF_TO_C05A
label c14a NUMBER_OF_TANKS
label c159 NUMBER_OF_TANKS_ALSO?

label c402 COUNTDOWN_TIMER_SECONDS
label c403 COUNTDOWN_TIMER_FRAMES
label c419 USER_LEVEL/CURRENT_PLAYER_DATA
label c41a PLAYING_HOW_LONG_NOW_TO_C41C
label c41b CURRENT_PLAYER_DATA_BYTE_02
label c41c CURRENT_PLAYER_DATA_BYTE_03
label c41d CURRENT_PLAYER_DATA_BYTE_04
label c41e CURRENT_PLAYER_DATA_BYTE_05
label c41f LIVES_REMAINING
label c420 CURRENT_PLAYER_DATA_BYTE_07
label c421 CURRENT_PLAYER_DATA_BYTE_08
label c422 USER_LEVEL
; starts as 0x0F.  Each completed direction bit unset
label c423 COMPLETED_GAMES_XXXXDURL
label c424 DIRECTION_CHOSEN_8D4U2R1L
; starts as 0x00.  Each attempted direction bit set
label c425 ATTEMPTED_GAMES_XXXXDURL
label c426 VECTOR_OF_GAMES_TO_C42D
label c42e CURRENT_PLAYER_DATA_BYTE_15

label c42f OTHER_PLAYER_DATA
label c45f PLAYER_NUMBER
label c466 NUMBER_OF_SCREEN_MESSAGES
label c467 NUMBER_OF_SCREEN_MESSAGES_2_FROM_C4BE
label c473 LEFT_COIN
label c474 RIGHT_COIN
label c47b IN_ATTRACT_MODE
label c47c NEXT_SLOT_IN_SCREEN_MESSAGE_QUEUE_2
label C4be SCREEN_MESSAGE_QUEUE_2_TO_C4D5
label C4d8 SCREEN_MESSAGE_QUEUE
label c4f6 DIFFICULTY_LEVEL
label c4f7 HIGH_SCORES_DIGITS
label c504 HIGH_SCORES_INITIALS_AND_LEVEL
label c52c HIGH_SCORES_DIGITS_3BYTES_BCD

; map(0xc000, 0xc7ff).mirror(0x1800)
label C000 NVRAM
; label C800 NVRAM_M1
; label D000 NVRAM_M2
; label D800 NVRAM_M3
; map(0xe000, 0xe1ff).mirror(0x1600)
; label E000 SPRITE_RAM_M4
; label E200 SPRITE_RAM_M1
; label E400 SPRITE_RAM_M2
; label E600 SPRITE_RAM_M3

; map(0xe800, 0xefff).mirror(0x1000)
; label e800 VIDEO_RAM_MIRROR

label F000 SPRITE_RAM
; label F200 SPRITE_RAM_M5
; label F400 SPRITE_RAM_M6
; label F600 SPRITE_RAM_M7

label f800 VIDEO_RAM_TO_FF7F

label ff80 SCRATCH_RAM_TO_FFFF

org 0000
commentline 0000 Dissasembly of the Tron 8/9 ROMs used by MAME (labelled as tron)

ascii 006b-008c

commentline 01f6 How long has this user been playing?  C41A = BCD minutes, C41B = BCD seconds,
commentline 01f6 C41C = countdown of 30 frames? (reset to 30 once count goes negative)

commentline 0401 Copy null-terminated string in DE to HL

commentline 04b0 Default high score initials table. 10x 3 bytes (FI,LI,level)
;data 04b0-04cd
ascii 04b0-04b2
ascii 04b3-04b5
ascii 04b6-04b8
ascii 04b9-04bb
ascii 04bc-04be
ascii 04bf-04c1
ascii 04c2-04c4
ascii 04c5-04c7
ascii 04c8-04ca
ascii 04cb-04cd

ascii 0513-051a

; Print messages from two different message queue?
commentline 06ca Count @C466 and data starting @C4D8

commentline 06f5 Count @C467 and data starting @C4BE

ascii 0b58-0b6a
ascii 0b6b-0b82
ascii 0b87-0b9a
ascii 0b9b-0bae
ascii 0baf-0bc2
ascii 0dfe-0e00

ascii 101b-1021
ascii 1022-1027
ascii 1028-102c
ascii 102d-1035
ascii 1036-103b
ascii 103c-103f
ascii 10ed-10f4
ascii 10f5-10fa
ascii 120c-1216
ascii 1217-1221
ascii 1222-1230
ascii 1231-123b
ascii 134e-1350
ascii 1433-1435
ascii 15e0-15e2
ascii 1605-1607
ascii 1653-165b
ascii 16ab-16b7
ascii 16d7-16d9
ascii 16e7-16f5
ascii 16f6-1704
ascii 1705-1713
ascii 1714-1722
ascii 1723-1731
ascii 17ba-17ca
ascii 17cb-17d8
ascii 17d9-17ec
ascii 17ed-17ff
ascii 1800-1812
ascii 1813-182b
ascii 182c-183d
ascii 183e-184f
ascii 1850-1868
ascii 1869-1883
ascii 1884-189b
ascii 189c-18b4
ascii 18b5-18c3
ascii 18c4-18de
ascii 18df-18f7
ascii 18f8-1911
ascii 1912-192b
ascii 192c-1935
ascii 1971-197a
ascii 197b-198d
ascii 198e-19a2
ascii 19a3-19b7
ascii 19b8-19cb
ascii 19cc-19e3
ascii 19e4-19f6
ascii 19f7-1a08
ascii 1a09-1a12
ascii 1a13-1a27
ascii 1a28-1a3c
ascii 1a3d-1a51
ascii 1a89-1a93
ascii 1a94-1aa8
ascii 1aa9-1abe
ascii 1abf-1ad6
ascii 1ad7-1ae9
ascii 1aea-1b02
ascii 1b03-1b19
ascii 1b1a-1b2a
ascii 1b2b-1b41
ascii 1b42-1b5b
ascii 1b5c-1b68
ascii 1bc2-1bcf
ascii 1bd0-1bdd
ascii 1bde-1bf2
ascii 1bf3-1c07
ascii 1c08-1c1b
ascii 1c1c-1c2e
ascii 1c2f-1c3f
ascii 1c40-1c47
ascii 1c48-1c5b
ascii 1c5c-1c6b
ascii 1c6c-1c71
ascii 1c72-1c84
ascii 1c85-1c97
ascii 1c98-1ca7
ascii 1ca8-1cb8
ascii 1d0e-1d16
ascii 1d17-1d25
ascii 1d26-1d3a
ascii 1d3b-1d4f
ascii 1d50-1d63
ascii 1d64-1d7c
ascii 1d7d-1d91
ascii 1d92-1da2
ascii 1da3-1dbc
ascii 1dbd-1dca
ascii 1dcb-1de2
ascii 1de3-1deb
ascii 1dec-1e05
ascii 1e06-1e10

commentline 1fc0 skip game instructions

commentline 20a7 Map of Difficulty level settings (picked by operator in settings) to how hard
commentline 20a7 each user level is set.  The hardness values range from 0 (easy) to 20 (hard)
commentline 20a7 Difficulty 1 moves from 0 to 20 one at a time.  Difficulty 9 moves 0,4,10,15,20
data 20a7-20b8
commentline 20b9 Maps for difficulty 1 to 9 to how hard the levels progress. 21,15,13,10,8,7,7,6,5 bytes
data 20b9-20cd
data 20ce-20dc
data 20dd-20e9
data 20ea-20f3
data 20f4-20fb
data 20fc-2102
data 2103-2109
data 210a-210f
data 2110-2114

commentline 2162 show games on game selection screen

; 2310
; 2316
; 231c
; 2322

; hack to print 2308
data 2304-2307
commentline 2308 Used at 2115.  Set what game is at what quadrant?  Then 4x vector table.  Then 
data 2308-230F
data 2310-2311
data 2312-2313
data 2314-2315
data 2316-2317

; hack to get label at 234A to print
data 2346-2349
data 234A-2AC9

ascii 2c4d-2c66
ascii 2c67-2c7d
ascii 2cf8-2d04
ascii 2d05-2d11

comment 346a Invincibility MCP Game = 18 (JR *)
comment 3471 Invincibility MCP Game = 11 (LD DE, **)

ascii 3d35-3d40
ascii 3d41-3d4c

comment 3f91 Invincibility TANK Game = 18 (JR *) (tank collision?)
comment 473b Invincibility TANK Game = 18 (JR *) (bullet collision?)

commentline 4d9e tank level 0-10
data 4d9e-4da7
data 4da8-4db1
data 4dbc-4dc5
data 4dda-4de3
data 4e02-4e0b
data 4f06-4f0f
data 4e66-4e6f
data 4e98-4ea1
data 4ed4-4edd
data 4e2a-4e33
data 4f42-4f4b

commentline 4f7e Tank game setup data. 10x4 bytes: ?, number of tanks, vector to level setup data

data 4f7e-4fa9

ascii 5167-5174
ascii 5175-5181
ascii 5182-518b
ascii 518c-519b
ascii 519c-51a9

comment 68c1 Invincibility I/O Tower Game = C9 (RET)

comment 5e6d if BC was 0, return.  Does this mean skip instructions?

ascii 5e8c-5e9a
ascii 5e9b-5ea8
ascii 5ea9-5eb6

comment 5fb3 look at 6b39 for more info!

commentline 60ce Tron fires his disk here (so don't set up disk in hand, maybe?)

commentline 6b39 Table of 16x 4 bytes used by joystick direction input @5FB3. There are 8 valid
commentline 6b39 inputs (D,U,R,L,DR,DL,UR,UL).  All others (no input or invalid input) are set
commentline 6b39 to all zeroes effectively giving you no input.
data 6b39-6b78

commentline 6fc7 Clear background screen (set graphic to 51 and attributes to 5E)
commentline 6fff Add a message to the output queue (max of 6) DE is source and BC is destination

commentline 7049 Initialize sprites (X=0, picture=3F, Y=0, unused=0)

commentline 7085 message queue 2 is full!  Reset watchdog and spin until MQ2 count < 6

commentline 709f Countdown 30 frames by decrementing c403
commentline 709f Countdown seconds by decrementing c402 every time c403 hits 00

commentline 70ca game select countdown digits vectors
commentline 70ca each digit needs 2 vectors!  Why?  This could be simplified!
data 70cd-70f4
data 70f5-70f9
data 70fa-70fe
data 70ff-7103
data 7104-7108
data 7109-710d
data 710e-7112
data 7113-7117
data 7118-711c
data 711d-7121
data 7122-7126
; got tired of filling these out by hand.  Rest in one block below
data 7127-7159

commentline 7159 Return C687 in A.  If non-zero, subtract 7.  Do not affect other registers.
commentline 7165 Return C687 in A.  If non-zero, subtract 2.  Do not affect other registers.

data 7200-797F

; Color palette for tanks
data 7980-799F

data 7a00-817F
data 8900-907F
; hack to get label at 9100 to print
data 90fc-90ff
data 9100-987F

ascii 9a60-9a73
ascii 9a74-9a86
ascii 9a87-9a8f
ascii 9a90-9a9e
ascii 9a9f-9aac
ascii 9aad-9abc
ascii 9abd-9acb
ascii 9acc-9ad4
ascii 9ad5-9ae3
ascii 9ae4-9afc
ascii 9afd-9b11
ascii 9b12-9b2a
ascii 9c8e-9c9c
ascii 9c9d-9caa
ascii 9cab-9cb2
ascii 9cb3-9cc0
ascii 9cc1-9cd0
ascii 9cd1-9ce1
ascii 9ce2-9cf1
ascii 9cf2-9d02
ascii 9d03-9d12
ascii 9d13-9d20
ascii 9d21-9d29
ascii 9d2a-9d40
ascii 9d41-9d53
ascii 9d54-9d5c
ascii 9d5d-9d6e
ascii 9d6f-9d7d
ascii 9d7e-9d8e
ascii 9d8f-9d9c
ascii 9d9d-9daa
ascii 9dab-9db8
ascii 9db9-9dc6
ascii 9dc7-9dd0
ascii 9dd1-9ddd
ascii 9dde-9dea
ascii 9deb-9dfa
ascii 9dfb-9e09
ascii 9e0a-9e1b
ascii 9f28-9f3f
ascii 9f40-9f4e
ascii 9f4f-9f5d
ascii 9f5e-9f6a
ascii 9f6b-9f78
ascii 9f79-9f86
ascii 9f87-9f93
ascii 9f94-9f9a
ascii 9f9b-9fa6
ascii 9fa7-9fb3
ascii 9fb4-9fb8
ascii a152-a15d
ascii a15e-a169
ascii a16a-a176
ascii a177-a183
ascii a184-a191
ascii a192-a1a0
ascii a1a1-a1af
ascii a1b0-a1ba
ascii a1bb-a1c5
ascii a1c6-a1d0
ascii a1d1-a1db
ascii a1dc-a1f3
ascii a28b-a297
ascii a298-a2a5
ascii a2a6-a2b7
ascii a2b8-a2ca
ascii a2cb-a2dd
ascii a2de-a2f0
ascii a2f1-a303
ascii a304-a316
ascii a317-a32a
ascii a32b-a33f
ascii a340-a34f
ascii a3e3-a3ef
ascii a3f0-a3f9
ascii a3fa-a403
ascii a404-a40d
ascii a40e-a417
ascii a418-a421
ascii a422-a42b
ascii a462-a46f
ascii a470-a489
ascii a48a-a49e
ascii a49f-a4af
ascii a5f9-a605
ascii a608-a614
ascii a617-a625
ascii a628-a630
ascii a633-a63b
ascii a63e-a646
ascii a649-a652
ascii a655-a65d
ascii a660-a666
ascii a669-a671
ascii a674-a682
ascii a683-a691
ascii a694-a6a5
ascii a6a8-a6b9
ascii a6ba-a6ca
ascii a6cd-a6d9
ascii a6da-a6e6
ascii a6e9-a6f6
ascii a6f7-a704
ascii a707-a70f
ascii a712-a71b
ascii a71e-a726
ascii a729-a72f
ascii a732-a73a
ascii a8bd-a8ca
ascii a8cb-a8d7
ascii a8d8-a8e1
ascii a8e2-a8e9
ascii a8ea-a8f6
ascii a8f7-a902
ascii a903-a908
ascii a909-a91a
ascii a91b-a925
ascii a926-a92a
ascii a92b-a93e
ascii a93f-a956
ascii a957-a969
ascii a96a-a97a
ascii a97b-a982
ascii a983-a993
ascii aab2-aac1
ascii aac2-aacd
ascii aace-aadd
ascii aade-aae5
ascii ab27-ab30
ascii ab31-ab34
ascii ab35-ab38
ascii ad4e-ad57
ascii ad58-ad5b
ascii ad5c-ad5f
ascii ad60-ad63
ascii ad64-ad67
ascii ad68-ad6b
ascii ad6c-ad6f
ascii ae2e-ae3d
ascii ae3e-ae4b
ascii ae4c-ae57
ascii ae68-ae6b
ascii ae6c-ae6f
ascii ae70-ae73
ascii ae74-ae78
ascii ae79-ae7b
ascii b000-b003
ascii b004-b007
ascii b008-b013
ascii b014-b01f
ascii b020-b028
ascii b029-b02c
ascii b02d-b034
ascii b035-b042
ascii b043-b053
ascii b054-b061
ascii b062-b06c
ascii b06d-b07a
ascii b07b-b089
ascii b08a-b094
ascii b095-b0a8
ascii b0a9-b0b0
ascii b0b1-b0ba
ascii b0bb-b0c4
ascii b0c5-b0ce
ascii b0cf-b0e2
ascii b0e3-b0f2
ascii b0f3-b104
ascii b105-b113
ascii b114-b11c
ascii b11d-b125

; B126-B182: Table of User levels. 12 x 2bytes of string location, and then the null-terminated strings.
data b126-b13d
ascii b13e-b141
ascii b142-b147
ascii b148-b14d
ascii b14e-b155
ascii b156-b15c
ascii b15d-b160
ascii b161-b167
ascii b168-b16d
ascii b16e-b176
ascii b177-b179
ascii b17a-b17d
ascii b17e-b182

; F000-F1FF Sprite RAM (X, picture, Y, unused)
;   Pictures: (bit 7=flipX & 6=flipY)
;   00 = explosion small
; 	01 = explosion large A
; 	02 = explosion large B (only 1 bit looks different from A???)
; 	03 = explosion large C
; 	04 = tank shot right
; 	05 = tank shot up
; 	06 = dot large
; 	07 = dot small
; 	08 = enemy tank facing right
; 	09 = enemy tank facing up
; 	0A = tank right
; 	0B = explosion small (looks identical to 00)
; 	0C = BIT!
; 	0D = side of MCP cone?
; 	0E = spider egg
; 	0F = spider full kick
; 	10 = spider half kick
; 	11 = spider squat
; 	12 = spider lift
; 	13-1C = cannon from tank, left (90 degrees) to up (0 degrees) (10 positions,
;      18 & 19 are 45 degrees and just ever so slightly different)
; 	1D - tron torso and head, legs together
; 	1E - tron legs, together
; 	1F - tron torso and head, legs apart
; 	20 - tron legs, apart
; 	21-2A - tron arm throwing, up (0 degrees) to left (270 degrees) (10 positions)
; 	2B - tron arm other lifted
; 	2C - tron arm other down
; 	2D - enemy light cycle up
; 	2E - enemy light cycle right
; 	2F - light cycle up
; 	30 - light cycle right
; 	31-36 - MCP brick left to right (6 positions)
; 	37 - MCP cone block
; 	38 - MCP cone left triangle?
; 	39 - MCP cone right triangle?
; 	3A - tron torso derez
; 	3B - tron legs derez
; 	3C - solar sailor (drops off bit)
; 	3D - Recognizer right
; 	3E - Recognizer up
; 	3F - nothing/empty/null

; F800-FF7F - background RAM.  Starts top right, moves down and then left and up when it wraps around.
; One byte picks the character or sprite, the other picks the color palette, flip, reverse, etc.
