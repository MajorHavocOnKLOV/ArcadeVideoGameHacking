; Bally Midway Tron data file for z80dasm
; Tron 8/9 ROMs used by MAME (labelled as tron)
; please send additions/changes to Franklin <at> FranklinBowen <dot> net
; look for newest files at http://www.FranklinBowen.net

; date 2020-11-11

; o Remarks - these are lines beginning with a semi-colon (;) they are completely ignored.
; o 1 ORG line - gives the origin of the code; this is the startingaddress to be used for the disassembly.
; o COMMENT lines - used to add comments to the end of lines of the disassembly.
; o COMMENTLINE lines - provide full-line comments to be included before a given address in the disassembly.
; o DATA lines - mark sections as data.  These sections will not be disassembled, but dumped as hex data instead.
; o ASCII lines - mark sections as text.  These sections will not be disassembled, but printed as text instead.
;
; current limitations:
; o number of LABEL, DATA/ASCII, COMMENT and COMMENTLINE lines determined at compile-time - see MAXLABEL, MAXDATA, MAXCOMMENT and MAXCOMMLINE
; o all DATA/ASCII lines in data file must be sorted in ascending address order
; o ditto for COMMENT and COMMENTLINE lines
; o if a DATA/ASCII area is preceded by what Z80dasm thinks is code that continues into the DATA/ASCII area, the data will not be marked
;   as such, and an error will be printed.  If this is the case, mark the line before the data as data also.

; GS = Game Selection
; LC = Light Cycle
; IO = IO Tower/Grid Bugs/Spiders/Circle

; Order of screens in attract mode:
;  MCP cone with copyrights
;  Text screen(s)
;  Game selection
;  Game play

; Order of text screens:
;  Rankings (High Scores)
;  Point Values
;  Map of Game Grid 1 & 2
;  Tank
;  MCP 1 & 2
;  IO Tower 1 & 2
;  Light Cyles

; Direction of games selected: Down, Up, Left, Right

; Attract mode actions in game:
;  Light Cycles: move up, slow
;  MCP: Fire (as fast as possible)
;  IO Tower: Move up and left while firing.  Enter MCP cone after 402, if Tron still alive
;  Tank: Fire (as fast as possible), rotating turret counter-clockwise, moving (until can't go any further)
;    up, right, down, left and repeat until someone dies

; Possible bugs:
; 1) Upon completion of the IO Tower game, the max disks/shots is one greater than it should be for just the next game!
; 2) The tank is 1 pixel too far right when moving up/down
; 3) The enemy tank shot has a stray pixel in the bottom row near the right side

; IN/OUT instructions apparently don't look up labels: TODO
; label 0000 IO_0
; label 0001 IO_1
; label 0002 IO_2
; label 0003 IO_3
; label 0004 IO_4
; label 0007 IO_AUDIO_STATUS
; label 001C IO_AUDIO_LATCHES
; label 00E0 IO_WATCHDOG_RESET
; label 00E8 IO_UNKNOWN_WRITTEN_AT_INITIALIZATION
; label 00F0 IO_CTC

label 006b COPYRIGHT_1982_BALLY_MIDWAY_MFG_CO_S
label 01ab COLOR_PALETTE_FOR_6_10_BYTES_TO_01BA?
label 01cb SERVICE_INTERRUPT_ROUTINE
label 02e3 GET_INPUT_FROM_JOYSTICK_TRIGGER_+?
label 0401 STRING_IN_DE_TO_HL
label 041c CHECK_DATA_C4F0_TO_C657?
label 04b0 DEFAULT_HIGH_SCORE_TABLE
; label 04b0 JP_S
label 04b3 BA_S
label 04b6 GG_S
label 04b9 EV_S
label 04bc AG_S
label 04bf JM_S
label 04c2 TL_S
label 04c5 SB_S
label 04c8 MJ_S
label 04cb JJ_S
label 0513 CREDITS_S
label 0557 OUTPUT_TO_SOUND_LATCHES
label 05c3 ROTATE_MCP_BLOCK_COLORS
label 05EC MCP_BLOCKS_COLOR_POSITIONS_LEFT_TO_RIGHT
label 06ca PRINT_OUT_MESSAGES_IN_QUEUES
label 06f5 PRINT_OUT_MESSAGES_IN_QUEUE_2
label 074f TANK_UPDATE_COLOR_CYCLING
label 0792 OUTPUT_IO_TOWER_TIMER?/TELETYPE_PRINTING_TO_THE_SCREEN_UNTIL_NULL_BYTE?
label 0825 UPDATE_GAME_SELECT_COUNTDOWN_TIMER_FROM_DE

label 0900 ATTRACT_MODE_LOOP

label 0d7c DRAW_ATTRACT_MCP_CONE

label 0af1 DISPLAY_MCP_CONE_WITH_COPYRIGHTS_AND_NEXT_INSTRUCTIONS

label 0b58 COPYRIGHT_MCMLXXXI_S
label 0b6b WALT_DISNEY_PRODUCTIONS_S
label 0b87 COPYRIGHT_MCMLXXXII_S
label 0b9b BALLY_MIDWAY_MFG_CO_S
label 0d52 READ_AND_PROCESS_INPUT_PORTS
label 0baf ALL_RIGHTS_RESERVED_S
label 0d38 READ_C45B_AND_JP_TO_1_OF_5_LOCATIONS
label 0e32 SHOULD_I_UPDATE_CONE_COLOR?
label 0e55 MCP_ATTRACT_COLORS?
label 101b PLEASE_S
label 1022 ENTER_S
label 1028 YOUR_S
label 102d INITIALS_S
label 1036 ERASE_S
label 103c END_S
label 10ed ERASE2_S
label 10f5 END2_S
label 120c YOUR_SCORE_S
label 1217 RANKING_IS_S
label 1222 NOT_IN_THE_TOP_S
label 1231 100_SCORES_S
label 1500 PICK_WHICH_INSTRUCTIONS_TO_PRINT
label 1538 SUBROUTINE_THAT_DOES_WHAT?
label 1558 DISPLAY_RANKINGS_SCREEN
label 1653 RANKINGS_S
label 165c DISPLAY_POINT_VALUES_SCREEN
label 16ab POINT_VALUES_S
label 16e7 TANKS______500_S
label 16f6 GRID_BUGS___50_S
label 1705 CYCLES_____500_S
label 1714 MCP_BLOCKS__25_S
label 1723 BIT_______5000_S
label 1732 PUT_STRINGS_IN_MSG_Q_DEST=IX+0_SRC=IX+2_END_WHEN_SRC=0000
label 1755 DISPLAY_MAP_OF_GAME_GRID_SCREENS
label 17ba MAP_OF_GAME_GRID_S
label 17cb PLAYER____DOT_S
label 17d9 JOYSTICK__MOVES_DOT_S
label 17ed TRIGGER___NOT_USED_S
label 1800 KNOB______NOT_USED_S
label 1813 TRON_CONSISTS_OF_4_GAMES_S
label 182c EACH_COLORED_AREA_S
label 183e REPRESENTS_A_GAME_S
label 1850 SELECT_AN_AREA_BY_MOVING_S
label 1869 TO_THE_OUTSIDE_EDGE_OF_THE_S
label 1884 CIRCLE_BEFORE_THE_TIMER_S
label 189c INSIDE_THE_CENTER_OF_THE_S
label 18b5 CIRCLE_EXPIRES_S
label 18c4 UPON_SUCCESSFUL_COMPLETION_S
label 18df OF_A_GAME_IN_AN_AREA_THE_S
label 18f8 AREA_CAN_NOT_BE_REENTERED_S
label 1912 UNTIL_ALL_AREAS_HAVE_BEEN_S
label 192c CONQUERED_S
label 1936 DISPLAY_TANK_GAME_SCREEN
label 193d DATA_3?
label 1971 TANK_GAME_S
label 197b PLAYER____RED_TANK_S
label 198e JOYSTICK__MOVES_TANK_S
label 19a3 TRIGGER___FIRES_DISK3_S
label 19b8 KNOB______AIMS_DISK_S
label 19cc DESTROY_ALL_ENEMY_TANKS_S
label 19e4 EACH_ENEMY_MUST_BE_S
label 19f7 HIT_3_TIMES_TO_BE_S
label 1a09 DESTROYED_S
label 1a13 1ST_HIT___100_POINTS_S
label 1a28 2ND_HIT___300_POINTS_S
label 1a3d 3RD_HIT___500_POINTS_S
label 1a52 DISPLAY_CYCLE_GAME_SCREEN
label 1bc2 IO_TOWER_GAME_S
label 1a89 CYCLE_GAME_S
label 1a94 PLAYER____BLUE_CYCLE_S
label 1aa9 JOYSTICK__MOVES_CYCLE_S
label 1abf TRIGGER___SPEED_CONTROL_S
label 1ad7 KNOB______NOT_USED2_S
label 1aea TOUCHING_A_WALL_OR_LIGHT_S
label 1b03 TRACE_DESTROYS_A_CYCLE_S
label 1b1a MAKE_LIGHT_PATHS_S
label 1b2b WHICH_FORCE_THE_YELLOW_S
label 1b42 CYCLES_INTO_THE_WALLS_AND_S
label 1b5c LIGHT_TRACES_S
label 1b69 DISPLAY_IO_TOWER_GAME_SCREENS
label 1bc2 IO_TOWER_GAME_S
label 1bd0 PLAYER___TRON_S
label 1bde JOYSTICK__MOVES_TRON_S
label 1bf3 TRIGGER___FIRES_DISK_S
label 1c08 KNOB______AIMS_DISK2_S
label 1c1c ENTER_THE_IO_TOWER_S
label 1c2f BEFORE_THE_TIMER_S
label 1c40 EXPIRES_S
label 1c48 TOUCHING_A_GRID_BUG_S
label 1c5c RESULTS_IN_TRON_S
label 1c6c DEREZ_S
label 1c72 THE_TIMER_VALUE_IS_S
label 1c85 AWARDED_AS_A_BONUS_S
label 1c98 WHEN_THE_PLAYER_S
label 1ca8 ENTERS_THE_TOWER_S
label 1cb9 DISPLAY_MCP_GAME_SCREENS
label 1d0e MCP_GAME_S
label 1d17 PLAYER____TRON_S
label 1d26 JOYSTICK__MOVES_TRON2_S
label 1d3b TRIGGER___FIRES_DISK2_S
label 1d50 KNOB______AIMS_DISK3_S
label 1d64 ENTER_THE_MASTER_CONTROL_S
label 1d7d PROGRAM_CONE_WITHOUT_S
label 1d92 TOUCHING_A_BLOCK_S
label 1da3 REMOVE_BLOCKS_BY_STRIKING_S
label 1dbd WITH_THE_DISK_S
label 1dcb 1000_BONUS_FOR_ENTERING_S
label 1de3 THE_CONE_S
label 1dec 1000_BONUS_FOR_DESTROYING_S
label 1e06 ALL_BLOCKS_S
label 1f00 GS_MOVE_DOWN
label 1f97 START_GAME
label 1fd1 DRAW_GAME_SELECT_SCREEN?
label 20a5 VECTOR_OF_DIFFICULTY_TO_HARDNESS_MAPS_(STARTS_AT_20A7)
label 2115 INITIALIZE_LEVEL?
label 234A BACKGROUND_PICK_A_GAME
label 2aca GS_COLOR_PALETTE
label 2c48 DATA_TO_2C4C?_USED_STARTING_AT_6F68
label 2c4d 1000_BONUS_ALL_BLOCKS_HIT_S
label 2c67 1000_FOR_ENTERING_CONE_S
label 2c7e MCP_INSTRUCTIONS
label 2cf8 TRY_TO_ENTER_S
label 2d05 THE_MCP_CONE_S
label 2d12 PLAY_MCP
label 3025 MCP_PROCESS_DISK_POSITION(S)?
label 3559 MCP_BRICKS_DATA_TO_35B2
label 35b3 MCP_CONE_RELATIVEX_RELATIVEY_SPRITE_NUMBER_TO_35D9
label 3926 MCP_COLOR_PALETTE_ALL_ZEROS
label 3966 DATA_FOR_MCP_SETUP_TO_398C
label 3a00 PLAY_TANKS
label 3cdf TANKS_INSTRUCTIONS
label 3d35 DESTROY_ALL_S
label 3d41 ENEMY_TANKS_S
label 3d4d TANK_JOYSTICK_INPUT_TABLE?
label 4063 TANKS_DATA_FOR_x_STARTS_AT_4066
label 46fb TANKS_DATA_FOR_x_STARTS_AT_46FF
label 47a7 COPY_X_00_Y_FROM_SPRITE_RAM_AT_IY_TO_HL_PLUS_MORE?
label 4f7e TANK_SET_UP_DATA_11X4_?_NUMBER_OF_TANKS_VECTOR_TO_MORE_DATA
label 4d77 TANK_PROCESS_?_USING_DATA_4CFF_AND_THE_DATA_VECTORS_IN_THERE
label 5000 PLAY_LC
label 5103 LC_INSTRUCTIONS
label 5167 AVOID_HITTING_S
label 5175 LIGHT_TRACES2_S
label 5182 AND_WALLS_S
label 518c USE_TRIGGER_FOR_S
label 519c SPEED_CONTROL_S
label 5551 LC_ERASE_TRAIL_OF_DESTROYED_LC
label 59e5 LC_DRAW_A_TRAIL?
label 5d00 PLAY_IO_TOWER
label 5e36 IO_TOWER_INSTRUCTIONS
label 5e7e IO_TOWER_STRING_DESTINATION_AND_SOURCE_LOCATIONS_00
label 5e8c ENTER_FLASHING_S
label 5e9b CIRCLE_BEFORE_S
label 5ea9 TIMER_EXPIRES_S
label 5eb7 IO_TOWER_COLOR_PALETTE
label 5f23 CONVERT_IO_TOWER_TIMER_TO_PRINTABLE_AND_?
label 5f73 HANDLE_JOYSTICK_INPUT?_TO_601F
label 6065 INITIALIZE_TRON_SPRITE_FOR_MCP_AND_IO_TOWER
label 6127 MOVE_SPIDERS?
label 621d SET_SOME_VALUES_IN_C02X?
label 6b39 JOYSTICK_INPUT_TABLE
label 6b79 DATA_FOR_SETTING_UP_TRON_SPRITES?
label 6f00 ADD_A_TO_HL_WITH_CARRY
label 6f05 PSEUDO_RANDOM_VALUE_IN_C47A?
label 6f17 RESET_WATCHDOG_UNTIL_C400_IS_ONE
label 6f2d COPY_10_FROM_HL_TO_FFC0
label 6f35 COPY_20_FROM_HL_TO_FF80
label 6f52 PROCESS_HIT_ON_TANK_SPIDER_MCP_BLOCK_OR_LC
label 6fb8 PUT_C_ON_STACK_TO_SEND_TO_AUDIO
label 6fc7 CLEAR_BACKGROUND
label 6fee SET_C40D_TO_FDD0_AND_ADD_A_MESSAGE_TO_Q
label 6ff4 INCREASE_C40D_BY_4_AND_ADD_A_MESSAGE_TO_Q
label 6fff ADD_A_MESSAGE_TO_Q
label 7020 ZERO_RAM_C000-C418
label 7026 ZERO_RAM_C000-C450
label 7029 ZERO_RAM_C000-C479
label 7035 COPY_0780_BYTES_FROM_HL_TO_BACKGROUND_RAM(F800)
label 7049 INITIALIZE_SPRITES
label 705d ADD_MESSAGE_TO_Q
label 707e ADD_MESSAGE_TO_Q2
label 709f PROCESS_GAME_SELECT_COUNTDOWN_TIMER
label 70ac PUT_GAME_SELECT_COUNTDOWN_DIGIT_MESSAGE_IN_Q2
label 70cd GAME_SELECT_COUNTDOWN_DIGITS
label 7159 RETURN_C687-7_IF_NZ_IN_A
label 7165 RETURN_C687-2_IF_NZ_IN_A
label 7200 BACKGROUND_TANK_GAME
label 7980 TANK_COLOR_PALETTE
label 79a0 COLOR_PALETTE_FOR_2?
label 79c0 IO_COLOR_PALETTE
label 7a00 BACKGROUND_IO_TOWER_GAME
label 8900 BACKGROUND_LC
label 9080 LC_COLOR_PALETTE
label 90c0 COLOR_PALETTE_FOR_5?
label 9100 BACKGROUND_TRAINING_FOR_LC
label 998c GET_TRIGGER_INPUT_FOR_SERVICE_MENU

label 9bd8 ?_DATA_USED_FOR_?1
label 9c14 SOUND_TEST_STRINGS_VECTORSET_DESTINATION_AND_SOURCE_30X

label 9a11 ?_DATA_USED_FOR_?0
label 9a2e TEST_STRINGS_VECTORSET_DESTINATION_AND_SOURCE_12X

label 9a60 SELECT_DESIRED_TEST_S
label 9a74 1_SELF_DIAGNOSTICS_S
label 9a87 2_SOUNDS_S
label 9a90 3_PLAYER_INPUT_S
label 9a9f 4_BOOKKEEPING_S
label 9aad 5_MACHINE_SETUP_S
label 9abd 6_CHANNEL_TEST_S
label 9acc 7_PRESET_S
label 9ad5 8_GRID_DISPLAY_S
label 9ae4 POSITION_CURSOR_BY_USING_S
label 9afd JOYSTICK_UP_AND_DOWN_S
label 9b12 HIT_FIRE_BUTTON_FOR_TEST_S
label 9c8e SELECT_A_SOUND_S
label 9c9d 1__ALL_SOUNDS_S
label 9cab 2__EXIT_S
label 9cb3 3__THROW_DISK_S
label 9cc1 4__HI_GEAR_HORZ_S
label 9cd1 5__LOW_GEAR_HORZ_S
label 9ce2 6__HI_GEAR_VERT_S
label 9cf2 7__LOW_GEAR_VERT_S
label 9d03 8__MISSILE_FIRE_S
label 9d13 9__BONUS_BASE_S
label 9d21 10__TILT_S
label 9d2a 11__ALL_MCP_BLOCKS_HIT_S
label 9d41 12__IO_TOWER_MUSIC_S
label 9d54 13__COIN_S
label 9d5d 14__SUCCESS_MUSIC_S
label 9d6f 15__FAIL_MUSIC_S
label 9d7e 16__ATTACK_SOUND_S
label 9d8f 17__TANK_HORZ_S
label 9d9d 18__TANK_VERT_S
label 9dab 19__TANK_FIRE_S
label 9db9 20__TANK_BLIP_S
label 9dc7 21__DEREZ_S
label 9dd1 22__MCP_BLIP_S
label 9dde 23__RELOCATE_S
label 9deb 24__TTY_CLATTER_S
label 9dfb 25__TOWER_BEAM_S
label 9e0a 26__TIMER_WARNING_S
label 9f28 SELECT_A_REPORT_OR_EXIT_S
label 9f40 CHUTE__1_COINS_S
label 9f4f CHUTE__2_COINS_S
label 9f5e LONGEST_GAME_S
label 9f6b SHORTEST_GAME_S
label 9f79 HIGHEST_SCORE_S
label 9f87 LOWEST_SCORE_S
label 9f94 BUY_IN_S
label 9f9b TIME_REPORT_S
label 9fa7 SCORE_REPORT_S
label 9fb4 EXIT_S
label a152 TIME_REPORT2_S
label a15e 0_TO_30_SEC_S
label a16a 30_TO_60_SEC_S
label a177 60_TO_90_SEC_S
label a184 90_TO_120_SEC_S
label a192 120_TO_150_SEC_S
label a1a1 150_TO_180_SEC_S
label a1b0 3_TO_4_MIN_S
label a1bb 4_TO_5_MIN_S
label a1c6 5_TO_6_MIN_S
label a1d1 OVER_6_MIN_S
label a1dc HIT_FIRE_BUTTON_TO_EXIT_S
label a28b SCORE_REPORT2_S
label a298 0_TO_5000_PTS_S
label a2a6 5000_TO_10000_PTS_S
label a2b8 10000_TO_20000_PTS_S
label a2cb 20000_TO_30000_PTS_S
label a2de 30000_TO_40000_PTS_S
label a2f1 40000_TO_50000_PTS_S
label a304 50000_TO_75000_PTS_S
label a317 75000_TO_100000_PTS_S
label a32b 100000_TO_150000_PTS_S
label a340 OVER_150000_PTS_S
label a3e3 CHANNEL_TEST_S
label a3f0 CHANNEL_1_S
label a3fa CHANNEL_2_S
label a404 CHANNEL_3_S
label a40e CHANNEL_4_S
label a418 CHANNEL_5_S
label a422 CHANNEL_6_S
label a462 PLAYER_INPUTS_S
label a470 ACTIVATE_ALL_PLAYER_INPUT_S
label a48a SWITCHES_AND_DEVICES_S
label a49f HIT_TILT_TO_EXIT_S
label a5f9 COIN_CHUTE_1_S
label a608 COIN_CHUTE_2_S
label a617 SERVICE_BUTTON_S
label a628 1_PLAYER_S
label a633 2_PLAYER_S
label a63e PL1_FIRE_S
label a649 PL1_RIGHT_S
label a655 PL1_LEFT_S
label a660 PL1_UP_S
label a669 PL1_DOWN_S
label a674 BUY_IN_ALLOWED_S
label a683 NO_BUY_IN_S
label a694 ROTATE_VALUE_PL_1_S
label a6a8 ROTATE_VALUE_PL_2_S
label a6ba EMPTY_S
label a6cd MINI_UPRIGHT_S
label a6da COCKTAIL_S
label a6e9 2_COIN_METERS_S
label a6f7 1_COIN_METER_S
label a707 PL2_FIRE_S
label a712 PL2_RIGHT_S
label a71e PL2_LEFT_S
label a729 PL2_UP_S
label a732 PL2_DOWN_S
label a8bd SETUP_OPTIONS_S
label a8cb COIN_CHUTE_12_S
label a8d8 COINS_FOR_S
label a8e2 CREDITS2_S
label a8ea COIN_CHUTE_22_S
label a8f7 CREDITS_FOR_S
label a903 BASES_S
label a909 1ST_EXTRA_BASE_AT_S
label a91b 000_POINTS_S
label a926 EXIT2_S
label a92b USE_JOYSTICK_UP_AND_S
label a93f DOWN_TO_POSITION_CURSOR_S
label a957 USE_1_AND_2_PLAYER_S
label a96a BUTTONS_TO_ALTER_S
label a97b OPTIONS_S
label a983 DIFFICULTY_LEVEL_S
label aab2 HIT_FIRE_BUTTON_S
label aac2 TO_CONTINUE_S
label aace HIT_FIRE_BUTTON2_S
label aade TO_EXIT_S
label ab1d DATA_USED_TO_DISPLAY_RAM_ERROR(S)
label ab27 RAM_ERROR_S
label ab31 B2_S
label ab35 F6_S
label aca2 Print ROM error(s)
label ac70 DATA_USED_TO_TEST_RAM
label ad15 DATA_USED_TO_TEST_ROM
label ad3c DATA_USED_TO_DISPLAY_ROM_ERROR(S)
label ad4e ROM_ERROR_S
label ad58 D2_S
label ad5c D3_S
label ad60 D4_S
label ad64 D5_S
label ad68 D6_S
label ad6c D7_S
label ad70 PRINT_A_NULL_TERMINATED_ASCII_STRING_FROM_BC_TO_HL
label ae2e INTERFACE_ERROR_S
label ae3e BOARD_TIMEOUT_S
label ae4c SOUND_BOARD_S
label ae68 A7_S
label ae6c A8_S
label ae70 A9_S
label ae74 A10_S
label ae79 A6_S
label ae7c DRAW_WHITE_AND_BLACK_CROSSHATCH_PATTERN
label ae95 DATA_TO_DRAW_WHITE_AND_BLACK_CROSSHATCH_PATTERN
label b000 1ST_S
label b004 2ND_S
label b008 PLAYER_1_UP_S
label b014 PLAYER_2_UP_S
label b020 PLAYER_1_S
label b029 EMPTY2_S
label b02d HISCORE_S
label b035 TO_START_GAME_S
label b043 TO_CONTINUE_GAME_S
label b054 PUSH_1_PLAYER_S
label b062 OR_DEPOSIT_S
label b06d INSERT_1_COIN_S
label b07b MORE_COINS_FOR_S
label b08a MORE_COINS_S
label b095 CREDITS_PER_PLAYER_S
label b0a9 OR_PUSH_S
label b0b1 2_PLAYERS_S
label b0bb GAME_OVER_S
label b0c5 EMPTY3_S
label b0cf BONUS_BASES_AWARDED_S
label b0e3 AT_10000_POINTS_S
label b0f3 PRESS_FIRE_BUTTON_S
label b105 FOR_DIRECTIONS_S
label b114 PLAYER_12_S
label b11d PLAYER_2_S
label b126 VECTOR_OF_USER_LEVEL_STRINGS
label b13e RPG_S
label b142 COBOL_S
label b148 BASIC_S
label b14e FORTRAN_S
label b156 SNOBOL_S
label b15d PL1_S
label b161 PASCAL_S
label b168 ALGOL_S
label b16e ASSEMBLY_S
label b177 OS_S
label b17a JCL_S
label b17e USER_S

; MCP
; C004 high bit is 1 unless a shot is fired?
; C013-16 path of disk? changes as disk flies
; C017 inverts when shot fired and then reverts
; C01A-1B change as shot fires
;
; c000 LC_TO_C1DF_IS_TRAILS_4_FOR_TRON_1-3_FOR_ENEMY
; c000 MCP 00-03 legs open, 04-04 legs closed
label c000 CPU_RAM_OR_GS_DISK_X_TANK_X_OR_MCP_TRON_LEGS-LC_TRAILS_TO_C1DF
label c001 TANK_PIC_OR_MCP_ROWS_OF_BRICKS
label c002 TANK_Y_OR_GS_DISK_Y
label c007 MCP_TRON_X_TANKS_DATA_VECTOR_x_1
label c009 MCP_TRON_Y_TANKS_DATA_VECTOR_x_2
label c00d IO_TOWER_TIMER_VALUE_REVERSED_TO_C010
label c00e INFINITE_TIME_CHEAT
label c010 TANKS_SHOTS_IN_RAM_STARTS_AT_C020
label c012 MCP_DISK_DATA_TO_C02F/IO_TOWER_TIMER_DIGITS_TO_C019
label c022 IO_TOWER_INCREMENTS_19_TO_1E_FOR_EACH_DISK_THROWN
label c023 IO_TOWER_TRIGGER_DEBOUNCE?
label c024 IO_TOWER_ALWAYS_80?
label c026 IO_TRON_X
label c028 IO_TRON_Y
label c029 JOYSTICK_INPUT_ARRAY_TO_C02C
label c03a MCP_DATA_TO_C0D9?
label c051 INFO_FOR_TANK_GAME_SEE_3ABF_TO_C05A_FOR_A_SINGLE_TANK
label c062 MCP_POSITION_OF_BLOCKS_0_TO_F
label c0dc MCP_TOWER_Y
label c0dd MCP_TOWER_X
label c0e3 MCP_BRICKS_REMAINING_COUNT
label c108 TANKS_ENEMY_SHOTS_IN_RAM_AT_C111?
label c14a NUMBER_OF_TANKS
label c159 TANKS_NUMBER_OF_ENEMY_SHOTS?
label c15b FIRST_NUMBER_FROM_4F7E
label c15f TANK_IF_HARDNESS>0X0B_SEE_COMMENT_AT_3A79
label c402 COUNTDOWN_TIMER_SECONDS
label c403 COUNTDOWN_TIMER_FRAMES
label c40f ATTRACT_MCP_ROTATE_COLORS_IF_NON_ZERO
label c410 MCP_BLOCKS_COLOR_VECTOR_POINTER_0E55
label c406 MCP_DISK_NUMBER_BEING_PROCESSED
label c419 HARDNESS_(OR_USER_LEVEL/CURRENT_PLAYER_DATA?)
label c41a PLAYING_HOW_LONG_NOW_TO_C41C
label c41b CURRENT_PLAYER_DATA_BYTE_02
label c41c CURRENT_PLAYER_DATA_BYTE_03
label c41d REMAINING_DISKS/SHOTS_AT_A_TIME
label c41e MAX_DISKS/SHOTS_AT_A_TIME
label c41f LIVES_REMAINING
label c420 CURRENT_PLAYER_DATA_BYTE_07
label c421 CURRENT_PLAYER_DATA_BYTE_08
label c422 USER_LEVEL
; starts as 0x0F.  Each completed direction bit unset
label c423 COMPLETED_GAMES_XXXXDURL
label c424 DIRECTION_CHOSEN_8D4U2R1L
; starts as 0x00.  Each attempted direction bit set
label c425 ATTEMPTED_GAMES_XXXXDURL
label c426 VECTOR_OF_GAMES_TO_C42D
label c42e NUMBER_OF_ROUNDS_WHEN_WRAPS_AROUND_SHOTS_MAY_GO_TO_1???
label c42f OTHER_PLAYER_DATA
label c45b GS_DIRECTION:1=DOWN,2=?,3=?,5=?,OTHER=?
label c45f PLAYER_NUMBER
label c461 WHICH_INSTRUCTIONS_TO_DISPLAY?_VECTOR_LIST_AT_1527?
label c466 NUMBER_OF_SCREEN_MESSAGES_FROM_C4D6
label c467 NUMBER_OF_SCREEN_MESSAGES_2_FROM_C4BE
label c469 ONLY_GET_UPDATED_WHEN_INTERRUPTS_ARE_DISABLED1!
label c46b ONLY_GET_UPDATED_WHEN_INTERRUPTS_ARE_DISABLED2!
label c473 LEFT_COIN
label c474 RIGHT_COIN
label c47b IN_ATTRACT_MODE?
label c47c NEXT_SLOT_IN_SCREEN_MESSAGE_QUEUE_2
label c48e ONLY_GET_UPDATED_WHEN_INTERRUPTS_ARE_DISABLED3!
label c4b8 SCREEN_DESTINATION?
label c4ba SOURCE?
label c4be SCREEN_MESSAGE_QUEUE_2_TO_C4D5
label c4d6 SCREEN_MESSAGE_QUEUE_TO_CD60?
label C4d8 SCREEN_MESSAGE_QUEUE
label c4f0 ?_AND_HIGH_SCORE_INITIALS_AND_?_TO_C549
label c4f6 DIFFICULTY_LEVEL
label c4f7 HIGH_SCORES_DIGITS
label c501 CREDITS
label c504 HIGH_SCORES_INITIALS_AND_LEVEL
label c52c HIGH_SCORES_DIGITS_3BYTES_BCD
label c687 FLIP_SCREEN_IF_VALUE_IS_01

; map(0xc000, 0xc7ff).mirror(0x1800)
label C000 NVRAM
; label C800 NVRAM_M1
; label D000 NVRAM_M2
; label D800 NVRAM_M3
; map(0xe000, 0xe1ff).mirror(0x1600)
; label E000 SPRITE_RAM_M4
; label E200 SPRITE_RAM_M1
; label E400 SPRITE_RAM_M2
; label E600 SPRITE_RAM_M3

; map(0xe800, 0xefff).mirror(0x1000)
; label e800 VIDEO_RAM_MIRROR

label F000 SPRITE_RAM
label F004 TANK_BODY_OR_LC_OR_IO_OR_MCP_TRON_AND_DISK_TORSO_LEGS_LEFT_DISK_RIGHT
label F008 TANK_TURRET_OR_LC_ENEMIES
label F00C TANK_SHOTS_F00C_TO_F01B(SPRITES_3_TO_6)
label f018 IO_OR_MCP_OR_TANK_DISKS_OR_SHOTS_1_TO_4
label f028 MCP_BLOCKS_TOP_LEFT_MOVING_DOWN_AND_WRAP_TO_TOP_RIGHT_TO_F09F
label f02c TANK_ENEMIES
label f030 IO_GRID_BUGS
label f044 TANK_ENEMY_SHOTS
label f060 TANK_HITS_ON_ENEMIES
label f0a0 MCP_TOWER_TO_F133
; label F200 SPRITE_RAM_M5
; label F400 SPRITE_RAM_M6
; label F600 SPRITE_RAM_M7

label f800 BACKGROUND_VIDEO_RAM_TO_FF7F

label ff80 COLOR_RAM_TO_FFFF

org 0000
commentline 0000 Dissasembly of the Tron 8/9 ROMs used by MAME (labelled as tron)

ascii 006b-008c

data 01ab-01ba

commentline 01f6 How long has this user been playing?  C41A = BCD minutes, C41B = BCD seconds,
commentline 01f6 C41C = countdown of 30 frames? (reset to 30 once count goes negative)

commentline 0401 Copy null-terminated string in DE to HL

commentline 049c Data copied with initial high scores to c4f0
data 049c-04af

commentline 04b0 Default high score initials table. 10x 3 bytes (FI,LI,level)
;data 04b0-04cd
ascii 04b0-04b2
ascii 04b3-04b5
ascii 04b6-04b8
ascii 04b9-04bb
ascii 04bc-04be
ascii 04bf-04c1
ascii 04c2-04c4
ascii 04c5-04c7
ascii 04c8-04ca
ascii 04cb-04cd

commentline 04ce Data copied with initial high scores to c4f0
data 04ce-04f5

ascii 0513-051a

commentline 05e4 Color RAM: If bit 8 is not set, write to even address. If bit 8 is set
commentline 05e4 inc to next address to write to odd address in order to make A1 high!

data 05ec-05f7

; Print messages from two different message queue?
commentline 06ca Count @C466 and data starting @C4D8. @C4D6 is next entry for Q
commentline 06ca Each entry is 2 bytes destination & 2 bytes source

commentline 06f5 Count @C467 and data starting @C4BE. @C4BC is next entry for Q
commentline 06f5 Each entry is 2 bytes destination & 2 bytes source

commentline 0775 Color RAM: if bit 8 is set, write to odd byte. Else write to even byte.

data 0786-0791

commentline 07cc FF byte has some special processing, for (c) only?
commentline 07e7 00 byte falls here

commentline Is this data? Are the bounds right? Where is this used?
data 0834-08ff

ascii 0b58-0b6a
ascii 0b6b-0b82

data 0b83-0b86

ascii 0b87-0b9a
ascii 0b9b-0bae
ascii 0baf-0bc2

commentline 0d52 I/O byte 00, bit 4? (isn't it 7?) is trigger. 0 when trigger is pulled, 1 otherwise

commentline 0d7c Draw MCP cone tip to sprites 16-30? (0x10-0x1C?)
commentline 0d9f Draw MCP blocks to sprites 1-24 (0x01-0x18)

commentline 0dc3 24x3 bytes: X, Y, picture (0x56 is added to X and 0x80 to Y)
data 0dc3-0dfd
ascii 0dfe-0e00
data 0e01-0e0a

commentline 0e0b 13x3 bytes: X, Y, picture (0x56 is added to X and 0x80 to Y)
data 0e0b-0e31

commentline 0e55 These are color WORDS!  If bit 8 is set, write the color to the next byte up
commentline 0e55 to set the A0 line high which sets bit 8 in the color WORD RAM.
commentline 0e55 See Bally/Midway's MCR II System manual top-right corner of page MCR-6
commentline 0e55 for more information.
data 0e55-0e60

ascii 101b-1021
ascii 1022-1027
ascii 1028-102c
ascii 102d-1035
ascii 1036-103b
ascii 103c-103f
ascii 10ed-10f4
ascii 10f5-10fa
ascii 120c-1216
ascii 1217-1221
ascii 1222-1230
ascii 1231-123b
ascii 134e-1350
ascii 1433-1435

data 1527-1534

commentline 15c3 print out high scores

ascii 15e0-15e2

ascii 1605-1607

commentline 161c print out user level (programming language)

ascii 1653-165b
ascii 16ab-16b7
ascii 16d7-16d9
ascii 16e7-16f5
ascii 16f6-1704
ascii 1705-1713
ascii 1714-1722
ascii 1723-1731

data 1766-1787

comment 17b8 Is this data?
data 1788-1789
data 178a-17b7
comment 17b8 Is this data?
data 17b8-17b9

ascii 17ba-17ca
ascii 17cb-17d8
ascii 17d9-17ec
ascii 17ed-17ff
ascii 1800-1812
ascii 1813-182b
ascii 182c-183d
ascii 183e-184f
ascii 1850-1868
ascii 1869-1883
ascii 1884-189b
ascii 189c-18b4
ascii 18b5-18c3
ascii 18c4-18de
ascii 18df-18f7
ascii 18f8-1911
ascii 1912-192b
ascii 192c-1935

data 193d-196e
data 196f-1970

ascii 1971-197a
ascii 197b-198d
ascii 198e-19a2
ascii 19a3-19b7
ascii 19b8-19cb
ascii 19cc-19e3
ascii 19e4-19f6
ascii 19f7-1a08
ascii 1a09-1a12
ascii 1a13-1a27
ascii 1a28-1a3c
ascii 1a3d-1a51

data 1a59-1a86
data 1a87-1a88

ascii 1a89-1a93
ascii 1a94-1aa8
ascii 1aa9-1abe
ascii 1abf-1ad6
ascii 1ad7-1ae9
ascii 1aea-1b02
ascii 1b03-1b19
ascii 1b1a-1b2a
ascii 1b2b-1b41
ascii 1b42-1b5b
ascii 1b5c-1b68

data 1b7a-1b9b
data 1b9c-1b9d
data 1b9e-1bbf
data 1bc0-1bc1

ascii 1bc2-1bcf
ascii 1bd0-1bdd
ascii 1bde-1bf2
ascii 1bf3-1c07
ascii 1c08-1c1b
ascii 1c1c-1c2e
ascii 1c2f-1c3f
ascii 1c40-1c47
ascii 1c48-1c5b
ascii 1c5c-1c6b
ascii 1c6c-1c71
ascii 1c72-1c84
ascii 1c85-1c97
ascii 1c98-1ca7
ascii 1ca8-1cb8

data 1cca-1ceb
data 1cec-1ced
data 1cee-1d0b
data 1d0c-1d0d

ascii 1d0e-1d16
ascii 1d17-1d25
ascii 1d26-1d3a
ascii 1d3b-1d4f
ascii 1d50-1d63
ascii 1d64-1d7c
ascii 1d7d-1d91
ascii 1d92-1da2
ascii 1da3-1dbc
ascii 1dbd-1dca
ascii 1dcb-1de2
ascii 1de3-1deb
ascii 1dec-1e05
ascii 1e06-1e10

commentline 1fc0 if level > 0, skip game instructions
commentline 1fc2 pick GS instructions to print

commentline 205c Finished level so set up for the next level (to 2097)
commentline 2070 Increment user level (C422)
commentline 20a3 This increment gives the next game an extra disk/shot! Is it a feature or a bug?

commentline 20a7 Map of Difficulty level settings (picked by operator in settings) to how hard
commentline 20a7 each user level is set.  The hardness values range from 0 (easy) to 20 (hard)
commentline 20a7 Difficulty 1 moves from 0 to 20 one at a time.  Difficulty 9 moves 0,4,10,15,20
data 20a7-20b8
commentline 20b9 Maps for difficulty 1 to 9 to how hard the levels progress. 21,15,13,10,8,7,7,6,5 bytes
data 20b9-20cd
data 20ce-20dc
data 20dd-20e9
data 20ea-20f3
data 20f4-20fb
data 20fc-2102
data 2103-2109
data 210a-210f
data 2110-2114

commentline 2162 show games on game selection screen

commentline 2207 Modify game selection screen to disable completed and show type of game if already attempted
commentline 2213 4x(3 bytes: ? ? ?). I think it's used to draw the sprites on the game selection screen

data 226e-22ab

commentline 22ac 4x3 bytes for auto game selection: disk X, disk Y,
commentline 22ac what to add to VECTOR_OF_GAMES to use correct 2310 data structure
commentline 22ac The X or Y position is checked against to start that game
data 22ac-22b7
commentline 22b8 Is the data block at 22b8 correct?  What's it used for?
data 22b8-2307

commentline 2308 Used at 2115.  Set what game is at what quadrant?  Then 4x vector table.  Then 
data 2308-230F
; This doesn't seem right
;data 2310-2311
;data 2312-2313
;data 2314-2315
;data 2316-2317

commentline 2310 Vector of games to quadrants at C426 points to these blocks of data
commentline 2310 2x game location, 2x another data structure below, 2x instrcution location
data 2310-2315
data 2316-231b
data 231c-2321
data 2322-2327

commentline 2328 The start locations were pulled the data structures above (starting 2310)
commentline 2328 the end points were just entered one less than the starting point of the
commentline 2328 next data block, but looking at the data itself, this looks OK.
data 2328-2331
data 2332-2335
data 2336-2339
data 233a-233d


data 233e-2349

data 234A-2AC9

data 2aca-2ae9

commentline 2c48 Not sure if all 5 bytes are data or how they're used starting at 6F68
data 2c48-2c4c

ascii 2c4d-2c66
ascii 2c67-2c7d
ascii 2cf8-2d04
ascii 2d05-2d11

commentline 2d33 MCP info: C001 gets number of rows (3,4,or 5 based on hardness 0,1-10,11+)
commentline 2d33 Each row has 16 bricks
commentline 2d33 Register c contains 1C, 1E, or 1F (why? visibility of bricks?)
commentline 2d33 C0E3 ends up with the total number of bricks (C001*0x10)

commentline 2d82 Set MCP tower at 40x and 56y
commentline 2e19 MCP: Tron has gone too far left. Set him to 21 x
commentline 2e21 MCP: Tron has gone too far right. Set him to E7 x

comment 346a Invincibility MCP Game = 18 (JR *)
comment 3471 Invincibility MCP Game = 11 (LD DE, **)

commentline 3559 5 rows (max) by 6 columns (always) by 3 bytes:
commentline 3559 relative X, relative Y, picture number
data 3559-35b2

data 35b3-35d9

data 3926-3945

commentline 3966 Data for setting up MCP cone game. 10x4 plugged into C0E5-9? Direction! Number of blocks? Vector to other data?
data 3966-398c

commentline 3a2b Set up shots (up to 4) in sprites 3-6 (F00C-F01B)

commentline 3a79 If hardness above 0x0B (11), subtract 5 from hardness until hardness for
commentline 3a79 this game is =< 0x0B. Increment C for each subtraction. Cap C at 4.
commentline 3a79 Multiply C times 32 and place into C15F

commentline 3aae If bit 7 in number of tanks is set, C15C=0x35

commentline 3b76 Setup of enemy tank shots
commentline 3b76 Sprite is explosion and X=0 and Y=4?

ascii 3d35-3d40
ascii 3d41-3d4c
data 3d4d-3db4

comment 3f91 Invincibility TANK Game = 18 (JR *) (tank collision?)

; This might not be right.  Used by data blocks starting at 4066
commentline 3f9a 18? data blocks used by tanks
data 3f3f-3f47
data 3f48-3f56
data 3f57-3f5f
data 3f60-3f66
data 3f67-3f6e
data 3f6f-3f77
data 3f78-3f86
data 3f87-3f8e
data 3f8f-3f8f
data 3f9a-3f9a
data 3f9b-3f3e

commentline 4066 18?x3 bytes: ?, vector to other data (they look like variable size 00 terminated data blocks)
;data 4066-40a4

commentline 4066 This data structure is used at 40C9. It's BIG but I'm not sure where it ends
;data 4066-4d7a

commentline 40d0 Update position and pic of tank (from C000 to C002)

; Another data structure may start at 4088
; data 409f-
; data 40af-
; data 40b8-
; data 40c7-
; data 40d0-
; data 40df-
; data 40e8-
; data 40f7-
; data 40ff-
; data 40dd-

comment 473b Invincibility TANK Game = 18 (JR *) (bullet collision?)

commentline ? 47b8-47c6 looks like data, not sure for what though ...
data 47b8-47c6

commentline 4d9e This data is copied to C051!
commentline 4d9e number of tanks x 10 bytes
commentline 4d9e 10 bytes: X, picture, Y, ?, ?, ?, ?, ?, ?, ?
commentline 4d9e tank 0 hardness data
data 4d9e-4da7
commentline 4da8 tank 1 hardness data
data 4da8-4dbb
commentline 4dbc tank 2 hardness data
data 4dbc-4dd9
commentline 4dda tank 3 hardness data
data 4dda-4e01
commentline 4e02 tank 4 hardness data
data 4e02-4e29
commentline 4e2a tank 9 hardness data
data 4e2a-4e65
commentline 4e66 tank 6 hardness data
data 4e66-4e97
commentline 4e98 tank 7 hardness data
data 4e98-4ed3
commentline 4ed4 tank 8 hardness data
data 4ed4-4f05
commentline 4f06 tank 5 hardness data
data 4f06-4f41
commentline 4f42 tank A hardness data
data 4f42-4f7d

; commentline 4f7e Tank game setup data. 11x4 bytes: ?, number of tanks, vector to level setup data

data 4f7e-4fa9

ascii 5167-5174
ascii 5175-5181
ascii 5182-518b
ascii 518c-519b
ascii 519c-51a9

commentline used at 57ba
data 5b62-5c20

commentline 5e6d if BC was 0, return.  Does this mean skip instructions?

data 5e7e-5e8b

ascii 5e8c-5e9a
ascii 5e9b-5ea8
ascii 5ea9-5eb6

data 5eb7-5ed6

commentline 5f73 IO:0000 - xxxBxxxx
commentline 5f73 IO:0002 - xxxxDURL

comment 5fb3 look at 6b39 for more info!

commentline 60ce Tron fires his disk here (so don't set up disk in hand, maybe?)

comment 68c1 Invincibility I/O Tower Game = C9 (RET)

commentline 6b39 Table of 16x 4 bytes used by joystick direction input @5FB3. There are 8 valid
commentline 6b39 inputs (D,U,R,L,DR,DL,UR,UL).  All others (no input or invalid input) are set
commentline 6b39 to all zeroes effectively giving you no input.
data 6b39-6b78
data 6b79-6eff

commentline 6f20 This line is hit for every tick of the teletype (which strikes twice per character)
commentline 6f2d Set color RAMs in some way?
commentline 6f35 Another entry point to: Set color RAMs in some way?
commentline 6f3e Color RAM: if bit 8 of word set, write to odd byte. Else, write to even byte

commentline 6fc7 Clear background screen (set graphic to 51 and attributes to 5E)
commentline 6fff Add a message to the output queue (max of 6) DE is source and BC is destination
commentline 6fff if Q is full, call RESET_WATCHDOG_UNTIL_C400_IS_ONE

commentline 7049 Initialize sprites (X=0, picture=3F, Y=0, unused=0)

commentline 7085 message queue 2 is full!  Reset watchdog and spin until MQ2 count < 6

commentline 709f Countdown 30 frames by decrementing c403
commentline 709f Countdown seconds by decrementing c402 every time c403 hits 00

commentline 70ca game select countdown digits vectors
commentline 70ca each digit needs 2 vectors!  Why?  This could be simplified!
data 70cd-70f4
data 70f5-70f9
data 70fa-70fe
data 70ff-7103
data 7104-7108
data 7109-710d
data 710e-7112
data 7113-7117
data 7118-711c
data 711d-7121
data 7122-7126
; got tired of filling these out by hand.  Rest in one block below
data 7127-7158

commentline 7159 Return C687 in A.  If non-zero, subtract 7.  Do not affect other registers.
commentline 7165 Return C687 in A.  If non-zero, subtract 2.  Do not affect other registers.

data 7200-797F

; Color palette for tanks
data 7980-799F

data 79a0-79bf
data 79c0-79df
data 79e0-79ff

data 7a00-817F
data 8900-907F

data 90a0-90bf
data 90c0-90df
data 90e0-90ff

data 9100-987F

comment Just to get the code at 9900 to disassemble correctly
data 98ff-98ff

data 9a11-9a2d
data 9a2e-9a5f

ascii 9a60-9a73
ascii 9a74-9a86
ascii 9a87-9a8f
ascii 9a90-9a9e
ascii 9a9f-9aac
ascii 9aad-9abc
ascii 9abd-9acb
ascii 9acc-9ad4
ascii 9ad5-9ae3
ascii 9ae4-9afc
ascii 9afd-9b11
ascii 9b12-9b2a

data 9bd8-9c13
data 9c14-9c8d

ascii 9c8e-9c9c
ascii 9c9d-9caa
ascii 9cab-9cb2
ascii 9cb3-9cc0
ascii 9cc1-9cd0
ascii 9cd1-9ce1
ascii 9ce2-9cf1
ascii 9cf2-9d02
ascii 9d03-9d12
ascii 9d13-9d20
ascii 9d21-9d29
ascii 9d2a-9d40
ascii 9d41-9d53
ascii 9d54-9d5c
ascii 9d5d-9d6e
ascii 9d6f-9d7d
ascii 9d7e-9d8e
ascii 9d8f-9d9c
ascii 9d9d-9daa
ascii 9dab-9db8
ascii 9db9-9dc6
ascii 9dc7-9dd0
ascii 9dd1-9ddd
ascii 9dde-9dea
ascii 9deb-9dfa
ascii 9dfb-9e09
ascii 9e0a-9e1b

data 9e1c-9e97
data 9ee0-9f27

ascii 9f28-9f3f
ascii 9f40-9f4e
ascii 9f4f-9f5d
ascii 9f5e-9f6a
ascii 9f6b-9f78
ascii 9f79-9f86
ascii 9f87-9f93
ascii 9f94-9f9a
ascii 9f9b-9fa6
ascii 9fa7-9fb3
ascii 9fb4-9fb8

data a071-a078

data a120-a151

ascii a152-a15d
ascii a15e-a169
ascii a16a-a176
ascii a177-a183
ascii a184-a191
ascii a192-a1a0
ascii a1a1-a1af
ascii a1b0-a1ba
ascii a1bb-a1c5
ascii a1c6-a1d0
ascii a1d1-a1db
ascii a1dc-a1f3

data a1f4-a207
data a259-a28a

ascii a28b-a297
ascii a298-a2a5
ascii a2a6-a2b7
ascii a2b8-a2ca
ascii a2cb-a2dd
ascii a2de-a2f0
ascii a2f1-a303
ascii a304-a316
ascii a317-a32a
ascii a32b-a33f
ascii a340-a34f

data a350-a363
data a3ad-a3e2

ascii a3e3-a3ef
ascii a3f0-a3f9
ascii a3fa-a403
ascii a404-a40d
ascii a40e-a417
ascii a418-a421
ascii a422-a42b

data a450-a461

ascii a462-a46f
ascii a470-a489
ascii a48a-a49e
ascii a49f-a4af

data a556-a5f6

data a5f7-a5f8
ascii a5f9-a605
data a606-a607
ascii a608-a614
data a615-a616
ascii a617-a625
data a626-a627
ascii a628-a630
data a631-a632
ascii a633-a63b
data a63c-a63d
ascii a63e-a646
data a647-a648
ascii a649-a652
data a653-a654
ascii a655-a65d
data a65e-a65f
ascii a660-a666
data a667-a668
ascii a669-a671
data a672-a673
ascii a674-a682
;data a681-a682
ascii a683-a691
data a692-a693
ascii a694-a6a5
data a6a6-a6a7
ascii a6a8-a6b9
; data a6ba-a6bb
ascii a6ba-a6ca
data a6cb-a6cc
ascii a6cd-a6d9
; data a6d8-a6d9
ascii a6da-a6e6
data a6e7-a6e8
ascii a6e9-a6f6
;data a6f5-a6f6
ascii a6f7-a704
data a705-a706
ascii a707-a70f
data a710-a711
ascii a712-a71b
data a71c-a71d
ascii a71e-a726
data a727-a728
ascii a729-a72f
data a730-a731
ascii a732-a73a

data a873-a8bc

ascii a8bd-a8ca
ascii a8cb-a8d7
ascii a8d8-a8e1
ascii a8e2-a8e9
ascii a8ea-a8f6
ascii a8f7-a902
ascii a903-a908
ascii a909-a91a
ascii a91b-a925
ascii a926-a92a
ascii a92b-a93e
ascii a93f-a956
ascii a957-a969
ascii a96a-a97a
ascii a97b-a982
ascii a983-a993

commentline a994 Data for ?
data a994-a9ff

ascii aab2-aac1
ascii aac2-aacd
ascii aace-aadd
ascii aade-aae5

commentline ab1d 10 bytes: 2x source for RAM ERROR, 2x destination, 2x destination?, 2x RAM@B2 2x RAM@F6
data ab1d-ab26

ascii ab27-ab30
ascii ab31-ab34
ascii ab35-ab38

data aba9-abb0

commentline abb1 Clear background (same as 6fc7?)
commentline abc3 Test RAM at C000, C200, C400, C600 (0x0200 each),F800,FC00 ((0x0400 each)
commentline abd1 Copy RAM from IX+0 sized IX+2 to IX+4
commentline abf7 Test RAM from IX+0 sized IX+2 to IX+4 with 00 and FF
commentline ac16 Zero RAM from IX+0 to (IX+2)-1
commentline ac38 Walking 1s from IX+0 to (IX+2)-1
commentline ac46 Copy back RAM from IX+4 sized IX+2 to IX+0

commentline ac70 8 bytes: 2x source, 2x count, 2x destination, ? watchdog setting?
data ac70-aca1

commentline ad15 6x(6 bytes: 2x size, 2x location, checksum, (bit mapped) location), 2x 00 to signal end
data ad15-ad1a
data ad1b-ad20
data ad21-ad26
data ad27-ad2c
data ad2d-ad32
data ad33-ad38
data ad39-ad3a

comment is this used or is it just an unused byte between data tables?  Or the checksum byte for this ROM?
data ad3b-ad3b

data ad3c-ad4d

ascii ad4e-ad57
ascii ad58-ad5b
ascii ad5c-ad5f
ascii ad60-ad63
ascii ad64-ad67
ascii ad68-ad6b
ascii ad6c-ad6f

data ae2a-ae2d

ascii ae2e-ae3d
ascii ae3e-ae4b
ascii ae4c-ae57

commentline ae58 2x SOUND BOARD, 2x destination, 2x destination of ROM(s), 5x2 bytes: source of sound board devices
data ae58-ae67

ascii ae68-ae6b
ascii ae6c-ae6f
ascii ae70-ae73
ascii ae74-ae78
ascii ae79-ae7b

data ae95-af14
commentline af4f It looks like data.  I want to figure out what it's for.
data af4f-afff

ascii b000-b003
ascii b004-b007
ascii b008-b013
ascii b014-b01f
ascii b020-b028
ascii b029-b02c
ascii b02d-b034
ascii b035-b042
ascii b043-b053
ascii b054-b061
ascii b062-b06c
ascii b06d-b07a
ascii b07b-b089
ascii b08a-b094
ascii b095-b0a8
ascii b0a9-b0b0
ascii b0b1-b0ba
ascii b0bb-b0c4
ascii b0c5-b0ce
ascii b0cf-b0e2
ascii b0e3-b0f2
ascii b0f3-b104
ascii b105-b113
ascii b114-b11c
ascii b11d-b125

; B126-B182: Table of User levels. 12 x 2bytes of string location, and then the null-terminated strings.
data b126-b13d
ascii b13e-b141
ascii b142-b147
ascii b148-b14d
ascii b14e-b155
ascii b156-b15c
ascii b15d-b160
ascii b161-b167
ascii b168-b16d
ascii b16e-b176
ascii b177-b179
ascii b17a-b17d
ascii b17e-b182

commentline b183 It looks like data until the end of ROM space.  I want to figure out what it's for.
data b183-bfff

; F000-F1FF Sprite RAM (X, picture, Y, unused)
;   Pictures: (bit 7=flipX & 6=flipY)
;   00 = explosion small
; 	01 = explosion large A
; 	02 = explosion large B (only 1 bit looks different from A???)
; 	03 = explosion large C
; 	04 = tank shot right
; 	05 = tank shot up
; 	06 = dot large
; 	07 = dot small
; 	08 = enemy tank facing right
; 	09 = enemy tank facing up
; 	0A = tank right
; 	0B = explosion small (looks identical to 00)
; 	0C = BIT!
; 	0D = side of MCP cone?
; 	0E = spider egg
; 	0F = spider full kick
; 	10 = spider half kick
; 	11 = spider squat
; 	12 = spider lift
; 	13-1C = cannon from tank, left (90 degrees) to up (0 degrees) (10 positions,
;      18 & 19 are 45 degrees and just ever so slightly different)
; 	1D - tron torso and head, legs together
; 	1E - tron legs, together
; 	1F - tron torso and head, legs apart
; 	20 - tron legs, apart
; 	21-2A - tron arm throwing, up (0 degrees) to left (270 degrees) (10 positions)
; 	2B - tron arm other lifted
; 	2C - tron arm other down
; 	2D - enemy light cycle up
; 	2E - enemy light cycle right
; 	2F - light cycle up
; 	30 - light cycle right
; 	31-36 - MCP brick left to right (6 positions)
; 	37 - MCP cone block
; 	38 - MCP cone left triangle?
; 	39 - MCP cone right triangle?
; 	3A - tron torso derez
; 	3B - tron legs derez
; 	3C - solar sailor (drops off bit)
; 	3D - Recognizer right
; 	3E - Recognizer up
; 	3F - nothing/empty/null

; F800-FF7F - background RAM.  Starts top right, moves down and then left and up when it wraps around.
; *UNLESS* the screen is inverted for P2 on a cocktail!  Then it starts bottom left, moves up and then
; right and down when it wraps around.  When C687 is 01 the screen is flipped
; One byte picks the character or sprite, the other picks the color palette, flip, reverse, etc.
