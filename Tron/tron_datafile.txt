; Bally Midway Tron data file for z80dasm
; Tron 8/9 ROMs used by MAME (labelled as tron)
; please send additions/changes to Franklin <at> FranklinBowen <dot> net
; look for newest files at http://www.FranklinBowen.net

; date 2020-11-11

; o Remarks - these are lines beginning with a semi-colon (;) they are completely ignored.
; o 1 ORG line - gives the origin of the code; this is the startingaddress to be used for the disassembly.
; o COMMENT lines - used to add comments to the end of lines of the disassembly.
; o COMMENTLINE lines - provide full-line comments to be included before a given address in the disassembly.
; o DATA lines - mark sections as data.  These sections will not be disassembled, but dumped as hex data instead.
; o ASCII lines - mark sections as text.  These sections will not be disassembled, but printed as text instead.
;
; current limitations:
; o number of LABEL, DATA/ASCII, COMMENT and COMMENTLINE lines determined at compile-time - see MAXLABEL, MAXDATA, MAXCOMMENT and MAXCOMMLINE
; o all DATA/ASCII lines in data file must be sorted in ascending address order
; o ditto for COMMENT and COMMENTLINE lines
; o if a DATA/ASCII area is preceded by what Z80dasm thinks is code that continues into the DATA/ASCII area, the data will not be marked
;   as such, and an error will be printed.  If this is the case, mark the line before the data as data also.

; GS = Game Selection
; LC = Light Cycle
; IO = IO Tower/Grid Bugs/Spiders/Circle

; Order of screens in attract mode:
;  MCP cone with copyrights
;  Instruction screen(s)
;  Game selection
;  Game play

; Order of instruction screens:
;  Rankings (High Scores)
;  Point Values
;  Map of Game Grid 1 & 2
;  Tank
;  MCP 1 & 2
;  IO Tower 1 & 2
;  Light Cyles

; Direction of games selected: Down, Up, Left, Right

; Attract mode actions in game:
;  Light Cycles: move up, slow
;  MCP: Fire (as fast as possible)
;  IO Tower: Move up and left while throwing disk(s).  Enter MCP cone after 402, if Tron still alive
;  Tank: Fire (as fast as possible), rotating turret counter-clockwise, moving (until can't go any further)
;    up, right, down, left and repeat until someone dies

; Difficulty 1, order of hardness for all games
; Hardness: there are 21 levels (0-20=0x14) but none of the games have that many levels
; Cycles: 0-18, then repeats last 5 (14-18)
; IO Tower: 0-8, then repeats last 6 (3-8)
; MCP: 0-9, then repeats last 6 (4-9)
; Tanks: 0-10, then repeats last 5 (6-10)

; How does the mapping not move past the end of the map when the user level is > than map length?
; Difficulty 5 (default setting), order of hardness for all games
; Cycles: 0,2,7,10,14,18, then 14-18
; IO Tower: 0-8, then repeats last 6 (3-8)
; MCP: 0-9, then repeats last 6 (4-9)
; Tanks: 0-10, then repeats last 5 (6-10)

; Tools
; - fill background with visible zeros: fill f800,77f,30

; Possible bugs:
; 1) Upon completion of the IO Tower game, the max disks is one greater than it should be for just the next game!
; 2) The player tank is 1 pixel too far right when moving up/down
; 3) The horizontal enemy tank bullet has a stray pixel in the bottom row close to the side
; 4) MCP color rotation has bugs

; Input
; =====
; Port/Bit 7	            6   5     4   3   2   1         0
; 0000     Service Switch   x   Tilt  1B  2P  1P  COIN 2/R  COIN 1/L
; 0001     x	            1 Spinner
; 0002     2D	            2U  2R    2L  1D  1U  1R        1L
; 0003     2B               x   x     x   x   x   x         x
; 0004     x                2 Spinner
; 0005
; 								
; Note: all bits are 1 (on) and flip to 0 (off or zero) when the control is activated (grounded)!								

; -------------------------------------------------------------------------------
; OPTION SWITCH SETTINGS
; -------------------------------------------------------------------------------
; -------------------------------------------------------------------------------
; /////////// SWITCH NO. 1 - AT B3 - LOCATED ON SOUND I/O P.C. BOARD ////////////
; -------------------------------------------------------------------------------
;                            | SW#1 SW#2 SW#3 SW#4 SW#5 SW#6 SW#7 SW#8 SW#9 SW#10
;                            |---------------------------------------------------
;     2 COIN METERS          |  ON             NOT  NOT  NOT  NOT  NOT  NOT  
;     1 COIN METER           | OFF            USED USED USED USED USED USED
; ---------------------------|---------------------------------------------------
;     MINI / UPRIGHT         |       ON
;     COCKTAIL TABLE         |      OFF
; ---------------------------|---------------------------------------------------
;     BUY IN ALLOWED         |            ON
;     NO BUY IN              |           OFF
; ---------------------------|---------------------------------------------------
;     FREEZE VIDEO           |                                               ON
;     NORMAL OPERATION       |                                              OFF
; -------------------------------------------------------------------------------
; -------------------------------------------------------------------------------
; /////////// SWITCH NO. 3 - AT D14 - LOCATED ON SOUND I/O P.C. BOARD ///////////
; -------------------------------------------------------------------------------
; -------------------------------------------------------------------------------
;                              | SW#1 **SW#2 **SW#3 **SW#4
;                              |---------------------------
;        NORMAL OPERATION      | OFF
;   SOUND I/O DIAGNOSTIC MODE  |  ON
; -----------------------------|-------------------------------------------------
;       NORMAL OPERATION       |        OFF
;         RAM/ROM TEST         |         ON
;  INDICATES TEST RESULTS VIA  |
;  YELLOW  L E D  ON SOUND I/O |
;  BOARD: FAST FLASH = BAD ROM |
;         SLOW FLASH = BAD RAM |
; -----------------------------|-------------------------------------------------
;       NORMAL OPERATION       |               OFF
;       OSCILLATOR TEST        |                ON
; -----------------------------|-------------------------------------------------
;       NORMAL OPERATION       |                      OFF
;         FILTER TEST          |                       ON
; -------------------------------------------------------------------------------
; 
; ** NO EFFECT IF SW#1 OR SWITCH NO. 3 IS IN THE "OFF" POSITION.

IO_LABEL 00 IO_0
IO_LABEL 01 IO_1
IO_LABEL 02 IO_2
IO_LABEL 03 IO_3
IO_LABEL 04 IO_4
IO_LABEL 07 IO_AUDIO_STATUS
IO_LABEL 1C IO_AUDIO_LATCHES
IO_LABEL E0 IO_WATCHDOG_RESET
IO_LABEL E8 IO_UNKNOWN_WRITTEN_AT_INITIALIZATION
IO_LABEL F0 IO_CTC0
IO_LABEL F1 IO_CTC1
; IO_LABEL F2 IO_CTC2
IO_LABEL F3 IO_CTC3

label 006b COPYRIGHT_1982_BALLY_MIDWAY_MFG_CO_S
label 01ab COLOR_PALETTE_FOR_6_10_BYTES_TO_01BA?
label 01cb SERVICE_INTERRUPT_ROUTINE
label 0289 GET_SPINNER_INPUT
label 02e3 GET_CREDIT_FROM_LEFT_COIN
label 0358 GET_CREDIT_FROM_RIGHT_COIN
label 0401 STRING_IN_DE_TO_HL
label 041c CHECK_DATA_C4F0_TO_C657?
label 0484 INITIALIZE_HIGH_SCORES_AND_?
label 049c DATA_TO_INITIALIZE_?_AND_HIGH_SCORE_AND_?
label 04b0 DEFAULT_HIGH_SCORE_TABLE
; label 04b0 JP_S
label 04b3 BA_S
label 04b6 GG_S
label 04b9 EV_S
label 04bc AG_S
label 04bf JM_S
label 04c2 TL_S
label 04c5 SB_S
label 04c8 MJ_S
label 04cb JJ_S
label 04f6 DISPLAY_NUMBER_OF_CREDITS
label 0513 CREDITS_S
label 0557 OUTPUT_TO_SOUND_LATCHES
label 05c3 ROTATE_MCP_BLOCK_COLORS
label 05EC MCP_BLOCKS_COLOR_POSITIONS_LEFT_TO_RIGHT
label 05f8 DISPLAY_SCORES_LIVES_REMAINING_AND_FLASH_ACTIVE_PLAYER
label 06bb PRINT_OUT_STICKMEN_OF_LIVES_REMAINING
label 06ca PRINT_OUT_MESSAGES_IN_QUEUES
label 06f5 PRINT_OUT_MESSAGES_IN_QUEUE_2
label 0720 PRINT_SCORE
label 074f PROCESS_COLOR_CYCLING
label 0786 COLORS_FOR_CYCLING_COLORS
label 0792 STRING_OUTPUT_UNTIL_NULL_BYTE?
label 0825 UPDATE_GAME_SELECT_COUNTDOWN_TIMER_FROM_DE
label 0900 ATTRACT_MODE_LOOP
label 0946 DRAW_CREDITS_SCREEN
label 09e4 GAME_OVER_PROCESS_BUY_IN
label 0aa0 SWITCH_BETWEEN_PLAYER_1_AND_2
label 0b54 COPYRIGHT_AND_SPACE_1_S
label 0b83 COPYRIGHT_AND_SPACE_2_S
label 0d7c DRAW_ATTRACT_MCP_CONE
label 0af1 DISPLAY_MCP_CONE_WITH_COPYRIGHTS_AND_NEXT_INSTRUCTIONS
label 0b58 COPYRIGHT_MCMLXXXI_S
label 0b6b WALT_DISNEY_PRODUCTIONS_S
label 0b87 COPYRIGHT_MCMLXXXII_S
label 0b9b BALLY_MIDWAY_MFG_CO_S
label 0d52 READ_AND_PROCESS_INPUT_PORTS
label 0baf ALL_RIGHTS_RESERVED_S
label 0d10 BUILD_ASCII_STRING_FOR_CREDITS_TO_START_A_GAME_AND_OUTPUT_WITH_CREDITS_PER_PLAYER
label 0d28 LOSE_A_LIFE_AND_RESTORE_MAX_DISKS_FROM_CURRENT_ROUND
label 0d38 READ_C45B_AND_JP_TO_1_OF_5_LOCATIONS
label 0dc3 MCP_BLOCKS_RELATIVE_DATA
label 0e0b MCP_CONE_RELATIVE_DATA
label 0e32 SHOULD_I_UPDATE_CONE_COLOR?
label 0e55 MCP_BLOCKS_COLORS
label 0f7f GET_INITIALS_FOR_A_HIGH_SCORE_AND_SAVE_INTO_BATTERY_BACKED_UP_RAM
label 0fa4 ENTER_INITIALS_DISPLAY_ALPHABET_DOWN_THE_SCREEN
label 1001 ENTER_INITIALS_SCREEN_STRING_VECTORS
label 101b PLEASE_S
label 1022 ENTER_S
label 1028 YOUR_S
label 102d INITIALS_S
label 1036 ERASE_S
label 1040 PROCESS_JOYSTICK_INPUT_FOR_ENTER_INITIALS_FOR_A_HIGH_SCORE
label 103c END_S
label 10da MOVE_SELECTED_LETTER_LEFT
label 10ed ERASE_WITH_LEADING_SPACE_S
label 10ee ERASE_WITHOUT_LEADING_SPACE_S
label 10f5 END_WITH_LEADING_SPACE_S
label 10f6 END_WITHOUT_LEADING_SPACE_S
label 10fb COPY_AND_COMPRESS_CURRENT_PLAYER_6_DIGIT_INTO_BCD_AT_C416
label 111d PUT_INITIALS_AND_USER_LEVEL_INTO_LIST_OF_TOP_10
label 120c YOUR_SCORE_S
label 1217 RANKING_IS_S
label 1222 NOT_IN_THE_TOP_S
label 1231 100_SCORES_S
label 123c PROCESS_BUTTON_PRESSES_FIRE_1P_2P_FOR_ENTER_INITIALS
label 129e ADD_PLAYER_TIME_TO_BOOKKEEPING_INFO
label 12f1 CHECK_PLAYING_TIME_FOR_LONGEST_OR_SHORTEST_GAME_PLAYED_FOR_BOOKKEEPING
label 132d DATA_TIMES_TO_COMPARE_FOR_THE_TIME_REPORT
label 133f ADD_PLAYER_SCORE_TO_BOOKKEEPING_INFO_AND_UPDATE_DAILY_HIGH_SCORE_IF_NEEDED
label 13f7 DATA_SCORES_TO_COMPARE_FOR_THE_SCORE_REPORT
label 1500 PICK_WHICH_INSTRUCTIONS_TO_PRINT
label 1527 VECTORS_TO_ATTRACT_MODE_INSTRUCTIONS
label 1535 WAIT_6_SECONDS_CHECKING_FOR_CREDITS_ADDED
label 1558 DISPLAY_RANKINGS_SCREEN
label 161c DISPLAY_USER_LEVEL
label 1653 RANKINGS_S
label 165c DISPLAY_POINT_VALUES_SCREEN
label 16ab POINT_VALUES_S
label 16b8 DATA_TO_DISPLAY_POINT_VALUES_SCREEN
label 16e7 TANKS______500_S
label 16f6 GRID_BUGS___50_S
label 1705 CYCLES_____500_S
label 1714 MCP_BLOCKS__25_S
label 1723 BIT_______5000_S
label 1732 PUT_STRINGS_IN_MSG_Q_DEST=IX+0_SRC=IX+2_END_WHEN_SRC=0000
label 1755 DISPLAY_MAP_OF_GAME_GRID_SCREENS
label 1766 MAP_OF_GAME_GRID_SCREEN_STRING_VECTORS_1
label 178a MAP_OF_GAME_GRID_SCREEN_STRING_VECTORS_2
label 17ba MAP_OF_GAME_GRID_S
label 17cb PLAYER____DOT_S
label 17d9 JOYSTICK__MOVES_DOT_S
label 17ed TRIGGER___NOT_USED_S
label 1800 KNOB______NOT_USED_S
label 1813 TRON_CONSISTS_OF_4_GAMES_S
label 182c EACH_COLORED_AREA_S
label 183e REPRESENTS_A_GAME_S
label 1850 SELECT_AN_AREA_BY_MOVING_S
label 1869 TO_THE_OUTSIDE_EDGE_OF_THE_S
label 1884 CIRCLE_BEFORE_THE_TIMER_S
label 189c INSIDE_THE_CENTER_OF_THE_S
label 18b5 CIRCLE_EXPIRES_S
label 18c4 UPON_SUCCESSFUL_COMPLETION_S
label 18df OF_A_GAME_IN_AN_AREA_THE_S
label 18f8 AREA_CAN_NOT_BE_REENTERED_S
label 1912 UNTIL_ALL_AREAS_HAVE_BEEN_S
label 192c CONQUERED_S
label 1936 DISPLAY_TANK_GAME_SCREEN
label 193d TANK_GAME_SCREEN_STRING_VECTORS
label 1971 TANK_GAME_S
label 197b PLAYER____RED_TANK_S
label 198e JOYSTICK__MOVES_TANK_S
label 19a3 TRIGGER___FIRES_DISK3_S
label 19b8 KNOB______AIMS_DISK_S
label 19cc DESTROY_ALL_ENEMY_TANKS_S
label 19e4 EACH_ENEMY_MUST_BE_S
label 19f7 HIT_3_TIMES_TO_BE_S
label 1a09 DESTROYED_S
label 1a13 1ST_HIT___100_POINTS_S
label 1a28 2ND_HIT___300_POINTS_S
label 1a3d 3RD_HIT___500_POINTS_S
label 1a52 DISPLAY_CYCLE_GAME_SCREEN
label 1a59 CYCLE_GAME_SCREEN_STRING_VECTORS
label 1a89 CYCLE_GAME_S
label 1a94 PLAYER____BLUE_CYCLE_S
label 1aa9 JOYSTICK__MOVES_CYCLE_S
label 1abf TRIGGER___SPEED_CONTROL_S
label 1ad7 KNOB______NOT_USED2_S
label 1aea TOUCHING_A_WALL_OR_LIGHT_S
label 1b03 TRACE_DESTROYS_A_CYCLE_S
label 1b1a MAKE_LIGHT_PATHS_S
label 1b2b WHICH_FORCE_THE_YELLOW_S
label 1b42 CYCLES_INTO_THE_WALLS_AND_S
label 1b5c LIGHT_TRACES_S
label 1b69 DISPLAY_IO_TOWER_GAME_SCREENS
label 1b7a IO_TOWER_GAME_SCREEN_STRING_VECTORS_1
label 1b9e IO_TOWER_GAME_SCREEN_STRING_VECTORS_2
label 1bc2 IO_TOWER_GAME_S
label 1bd0 PLAYER___TRON_S
label 1bde JOYSTICK__MOVES_TRON_S
label 1bf3 TRIGGER___FIRES_DISK_S
label 1c08 KNOB______AIMS_DISK2_S
label 1c1c ENTER_THE_IO_TOWER_S
label 1c2f BEFORE_THE_TIMER_S
label 1c40 EXPIRES_S
label 1c48 TOUCHING_A_GRID_BUG_S
label 1c5c RESULTS_IN_TRON_S
label 1c6c DEREZ_S
label 1c72 THE_TIMER_VALUE_IS_S
label 1c85 AWARDED_AS_A_BONUS_S
label 1c98 WHEN_THE_PLAYER_S
label 1ca8 ENTERS_THE_TOWER_S
label 1cb9 DISPLAY_MCP_GAME_SCREENS
label 1cca MCP_GAME_SCREEN_STRING_VECTORS_1
label 1cee MCP_GAME_SCREEN_STRING_VECTORS_2
label 1d0e MCP_GAME_S
label 1d17 PLAYER____TRON_S
label 1d26 JOYSTICK__MOVES_TRON2_S
label 1d3b TRIGGER___FIRES_DISK2_S
label 1d50 KNOB______AIMS_DISK3_S
label 1d64 ENTER_THE_MASTER_CONTROL_S
label 1d7d PROGRAM_CONE_WITHOUT_S
label 1d92 TOUCHING_A_BLOCK_S
label 1da3 REMOVE_BLOCKS_BY_STRIKING_S
label 1dbd WITH_THE_DISK_S
label 1dcb 1000_BONUS_FOR_ENTERING_S
label 1de3 THE_CONE_S
label 1dec 1000_BONUS_FOR_DESTROYING_S
label 1e06 ALL_BLOCKS_S
label 1f00 GS_DO_?
label 1f0f GS_NO_DIRECTION_CHOSEN_YET
label 1f4d GS_DIRECTION_CHOSEN
label 1f1f GS_TIMER_EXPIRED_AUTO_SELECT_GAME_DURL
label 1f97 START_GAME
label 1fd1 DRAW_GAME_SELECT_SCREEN?
label 20a5 VECTOR_OF_DIFFICULTY_TO_HARDNESS_MAPS_(STARTS_AT_20A7)
label 2115 INITIALIZE_LEVEL
label 2167 GS_GET_AND_PROCESS_JOYSTICK_INPUT?
label 2207 DRAW_SPRITES_FOR_GAME_SELECTION_SCREEN
label 22b8 GS_X_AND_Y_DELTA_TO_ADD_TO_DISK_SPRITE_X_AND_Y
label 2308 GS_VECTOR_TO_GAME_VECTORS
label 234A BACKGROUND_PICK_A_GAME
label 2aca GS_COLOR_PALETTE
label 2c48 SCORE_MCP_HIT_ALL_BLOCKS_PLUS_ENTERING_CONE
label 2c4d 1000_BONUS_ALL_BLOCKS_HIT_S
label 2c67 1000_FOR_ENTERING_CONE_S
label 2c7e MCP_INSTRUCTIONS
label 2cee MCP_INSTRUCTIONS_STRING_VECTOR_WITH_DESTINATIION_AND_SOURCE
label 2cf8 TRY_TO_ENTER_S
label 2d05 THE_MCP_CONE_S
label 2d12 PLAY_MCP
label 2ead SETUP_TRON_SPRITES_FOR_MCP
;MCP_DRAW_TRON_AT_INITIAL_POSITION_FOR_INSTRUCTIONS_MCP_AND_IO_TOWER
label 2f5f MCP_DEREZ_TRON
label 31b0 MCP_ROTATE_RIGHT
label 31c8 MCP_ROTATE_LEFT
label 3025 MCP_PROCESS_DISK_POSITION(S)?
label 317e MCP_DISK_END_FLIGHT
label 3308 MCP_DRAW_CONE
label 3331 MCP_DRAW_WALLS
label 3363 MCP_HIDE_SPRITES_33_AND_34
label 337b MCP_DRAW_BLOCKS
label 33af MCP_HIDE_SPRITE_GOING_OFF_BOTTOM_OF_SCREEN
label 3481 SCORE_MCP_ENTERING_CONE
label 352a MCP_PROCESS_HIT_BLOCK
label 354f MCP_BLOCK_HIT_AUDIO
label 3554 SCORE_MCP_BLOCK
label 3559 MCP_BLOCKS_DATA_TO_35B2
label 35b3 MCP_CONE_RELATIVEX_RELATIVEY_SPRITE_NUMBER_TO_35D9
label 35da MCP_BLOCK_COLORS_LEFT_TO_RIGHT
label 363a JOYSTICK_INPUT_FOR?
label 367a DATA_FOR_DISPLAYING_TRON_SPRITES_IDENTICAL_TO_6B79
label 3926 MCP_COLOR_PALETTE_ALL_ZEROS
label 3966 DATA_FOR_MCP_SETUP_TO_398D
label 3a00 PLAY_TANKS
label 3ca1 TANK_COPY_C407_TO_C47C_WHY?
label 3ca8 TANK_TRANSITION_USER_DEATH_EXPLOSIONS_00_TO_03
label 3cdf TANK_INSTRUCTIONS
label 3d35 DESTROY_ALL_S
label 3d41 ENEMY_TANKS_S
label 3d4d TANK_JOYSTICK_INPUT_TABLE?
label 3da5 TANK_ATTRACT_MODE_INPUT
label 3db5 TANK_PROCESS_CONTROLS_INPUT
label 3f3e TANK_CHECK_FOR_COLLISION_BETWEEN_ENEMY_TANKS_AND_USER
;label 4063 TANK_DATA_FOR_x_STARTS_AT_4066
label 4063 TANK_DATA_AT_4066
label 4066 TANK_DATA_LABEL_FOR_4063
label 40a5 TANK_BASED_ON_ENEMY_TANK_XY_PUT_TABLE_VECTORS_INTO_HL_AND_BC
label 40d0 TANK_UPDATE_POSITION_AND_SPRITE_OF_TANK_FROM_C000_TO_C002
label 40ea TANK_UPDATE_POSITION
label 40fc TANK_WARP
;label 4145 TANK_DATA_FOR_?
label 4124 TANK_DATA_AT_4127
label 4127 TANK_DATA_LABEL_FOR_4124
label 4145 TANK_DATA_AT_4148
label 4148 TANK_DATA_LABEL_FOR_4145
label 420d TANK_PROCESS_ALL_ENEMY_TANKS?
label 4269 TANK_PROCESS_ENEMY_TANK_WITH_3_HITS
label 42ca TANK_CHANGE_DIRECTION_TO_UP_OR_DOWN?
label 4369 TANK_GOING_UP_OR_DOWN_01
label 4379 TANK_CONSIDER_CHANGING_DIRECTION_LEFT_OR_RIGHT?
; 4414 Find X & Y of this tank in a data structure?  For movement?
label 4414 TANK_TURN_LEFT(_OR_RIGHT?)
label 4443 TANK_TURN_ENEMY_UP_OR_DOWN
label 447e TANK_RETURN_CARRY_IF_OTHER_TANK_AT_OUR_NEXT_DECISION_POINT_AND_GOING_DIFFERENT_DIRECTION?
label 44bd TANK_TURNED_SO_SET_SPRITE_AND_NEXT_INTERSECTION
label 4508 TANK_UPDATE_HIT_POSITION_ON_ENEMY_TANK_OFFSET_X
label 4531 TANK_UPDATE_HIT_POSITION_ON_ENEMY_TANK_OFFSET_Y
label 455a TANK_SET_HL_TO_THE_CORRECT_HIT_SPRITE
label 456d TANK_PROCESS_DISKS_THROWN?
label 45ed DATA_USED_FOR_???_TO_45FE
label 45ff TANK_PROCESS_DISKS_THROWN
label 467c TANK_DISK_NEGATE_DELTA_Y
label 46aa TANK_DISK_NEGATE_DELTA_X
label 4653 TANK_PROCESS_DISK_HIT_WALL
label 46cb TANK_SPRITE_UPDATE_POSITION_OF_DISK_HITTING_WALL
label 46f5 TANK_CHECK_FOR_BULLET_AT_IY_HIT_ON_ALL_ENEMY_TANKS
;label 46fb TANK_DATA_FOR_x_STARTS_AT_46FF
label 472b TANK_CHECK_BULLET_POSITION_IN_BC_FOR_HIT_ON_USER
label 4752 TANK_TERMINATE_DISK_THROWN_AT_IY
label 4762 TANK_PROCESS_HIT_ON_ENEMY_TANK_AT_IX
label 47b8 SCORE_TANK_HIT_3
label 47bd SCORE_TANK_HIT_2
label 47c2 SCORE_TANK_HIT_1
label 47e2 TANK_UPDATE_POSITION_OF_SPRITE_AT_HL_FROM_DATA_AT_IX
label 47a7 COPY_X_00_Y_FROM_SPRITE_RAM_AT_IY_TO_HL_PLUS_MORE?
label 47c7 TANK_UPDATE_DISK_THROWN_SPRITE_FROM_RAM_AT_IY
label 47ff TANK_PROCESS_INPUT_AND_INITIALIZE_THROWN_DISK
label 4884 DATA_TO_49C7_USED_AT_49C8
label 49c8 TANK_TURRET_DRAW
label 4a54 TANK_FIRE_ON_USER_IF_POSSIBLE
label 4af9 COMPARE_HL_ASCENDING_UNTIL_B_IS_GREATER
label 4aff TANK_FIRE_ENEMY_BULLET
label 4b70 TANK_BULLET_UPDATE_SPRITE_FROM_RAM_AT_IY
label 4b8d TANK_BULLET_OFFSET_X_AND_Y_FOR_COLLISION_DETECTION
label 4b90 TANK_PROCESS_ENEMY_BULLETS
label 4bfd TANK_TERMINATE_ENEMY_BULLET
label 4c09 TANK_PROCESS_HIT_ON_USER_UPDATE_SPRITES_SET_VALUES_AND_PUT_AUDIO_ON_STACK
;label 4cfb TANK_DATA_FOR?_STARTS_AT_4CFF
label 4cfb TANK_DATA_AT_4CFF
label 4cff TANK_DATA_LABEL_FOR_4CFB
label 4d77 TANK_PROCESS_?_USING_DATA_4CFF_AND_THE_DATA_VECTORS_IN_THERE
label 4f7e TANK_SET_UP_DATA
label 4faa TANK_WARP_LOCATION_DATA_X_SPRITE_Y
label 5000 PLAY_LC
label 5103 LC_INSTRUCTIONS
label 5151 LC_INSTRUCTION_STRINGS_SOURCE_AND_DESTINATION_DATA
label 5167 AVOID_HITTING_S
label 5175 LIGHT_TRACES2_S
label 5182 AND_WALLS_S
label 518c USE_TRIGGER_FOR_S
label 519c SPEED_CONTROL_S
label 5234 LC_COPY_A_INTO_HL_TO_HL_PLUS_2
label 523b LC_SET_UP_USER_AND_ENEMIES_C1E0_TO_C230?
label 54c6 LC_TRON_USER_DIED
label 5535 FLAG_LC_IN_DE_AS_DESTROYED_PLAY_EXPLOSION_SOUND_AND_JP_TO_ADD_SCORE?
label 554c SCORE_LC
label 5551 LC_ERASE_TRAIL_OF_DESTROYED_LC
label 558d LC_DEPENDING_ON_USER_SPRITE_COPY_AND_INC/DEC_BETWEEN_C1F5_AND_C1FD
label 56f4 LC_SET_UP_BOUNDARIES_IN_RAM_DATA_STRUCTURE_FROM_C000_TO_C1DF
label 57ef LC_DATA_FOR_TRIGGER_PULLED_AND_UP_DOWN_VS_LEFT_RIGHT
label 5873 DEC_HL_IF_NEGATIVE_SET_TO_02
label 587b MATH_C212=(3*C214)+C213
label 597f LC_INC_C20F_IF_08_SET_TO_00
label 598a LC_INC_C20E_IF_08_SET_TO_00
label 5995 LC_(HL-F800)/2_RETURN_HOW_MANY_0x20s_IN_A
;label 59a9 HL=C_IF_A_NOT_ZERO_ADD_0X20_B_TIMES_AND_DOUBLE_ADD_DE
label 59a9 LC_MATH_SPRITE_X_AND_Y_TO_BACKGROUND_RAM_LOCATION?
label 59e5 LC_DRAW_A_TRAIL?
label 5a1a LC_DRAW_D_INTO_LC_RAM_DATA_STRUCTURE
label 5ac9 LC_MULTIPLE_CYCLES_DO_SOMETHING?
label 5c1b LC_DATA_STRUCTURE_TO_SETUP_LIGHT_CYCLES
label 5d00 PLAY_IO_TOWER
label 5d7c IO_TOWER_CHECK_WHETHER_TO_DEPLOY_SOLAR_SAILER
label 5d8d IO_TOWER_DECREMENT_CLOCK?
label 5e36 IO_TOWER_INSTRUCTIONS
label 5e7e IO_TOWER_STRING_DESTINATION_AND_SOURCE_LOCATIONS_00
label 5e8c ENTER_FLASHING_S
label 5e9b CIRCLE_BEFORE_S
label 5ea9 TIMER_EXPIRES_S
label 5eb7 IO_TOWER_COLOR_PALETTE
label 5f23 CONVERT_IO_TOWER_TIMER_TO_PRINTABLE_AND_?
label 5f73 HANDLE_JOYSTICK_INPUT?_TO_601F
label 6020 IO_TOWER_CHECK_FOR_ENTRY
label 6065 SETUP_TRON_SPRITES_FOR_IO_TOWER
label 6127 IO_TOWER_GET_TRIGGER_STATE_AND_SET_C02E_BASED_ON_ARM_ROTATION
label 619f IO_TOWER_DEREZ_TRON
label 621d TRON_SPRITE_SET_INITIAL_POSITION_AND_ROTATION
label 62ed SCORE_IO_TOWER_BIT
label 62f2 IO_TOWER_PROCESS_SOLAR_SAILER
label 630b SOLAR_SAILER_MOVE_DOWN
label 6326 SOLAR_SAILER_MOVE_UP
label 633a SOLAR_SAILER_DROP_BIT
label 6357 SOLAR_SAILER_HIDE_SPRITE_AND_CHANGE_FLAG_TO_DISABLE_PROCESSING
label 636d PROCESS_DISK_THROW?
label 6433 DISK_INITIALIZE_DATA_AND_SPRITE
label 64db DISK_TERMINATE_SPRITE_AND_DATA_AND_INC_REMAINING_DISKS
label 6619 GRID_BUGS_ADD_MORE
label 66ae DATA_GRID_BUGS_BYTES_4_TO_7_OF_0XB_BYTES_RAM_DATA
label 6772 SCORE_IO_TOWER_GRID_BUG
label 6777 IO_TOWER_SET_UP_SOLAR_SAILER_AND_GRID_BUG_SPRITES_AND_DATA
label 6827 IO_TOWER_PROCESS_DISKS_THROWN?
label 6881 IO_TOWER_PROCESS_GRID_BUGS?
label 68c6 DATA_TO_?_USED_AT_5D19
label 68fb IO_TOWER_VECTORS_TO_SETUP_GRID_BUGS_BY_HARDNESS
label 6b39 JOYSTICK_INPUT_TABLE
label 6b79 DATA_FOR_DISPLAYING_TRON_SPRITES_IDENTICAL_TO_367A
label 6f00 ADD_A_TO_HL_WITH_CARRY
label 6f05 PSEUDO_RANDOM_VALUE_IN_A_AND_C47A
label 6f17 RESET_WATCHDOG_UNTIL_C400_IS_ONE
label 6f25 COMPLEMENT_AND_INCREMENT_HL
label 6f2d COPY_10_FROM_HL_TO_FFC0
label 6f35 COPY_20_FROM_HL_TO_FF80
label 6f52 ADD_SCORE_OF_HL_TO_CURRENT_PLAYER_AND_CHECK_FOR_AND_PROCESS_BONUS_LIFE
label 6fb8 PUT_C_ON_STACK_TO_SEND_TO_AUDIO
label 6fc7 RESET_WD_X2_UPDATE_SETTINGS_XXX_AND_CLEAR_BACKGROUND
label 6fee SET_DISPLAY_POSITION_DOWN_6_RIGHT_6_AND_ADD_A_MESSAGE_TO_Q
label 6ff4 MOVE_DOWN_2_LINES_AND_ADD_A_MESSAGE_TO_Q
label 6fff ADD_A_MESSAGE_TO_Q
label 7020 ZERO_RAM_C000-C418
label 7026 ZERO_RAM_C000-C450
label 7029 ZERO_RAM_C000-C479
label 7035 BACKGROUND_RAM_FILL_FROM_HL_0780_BYTES_TO_F800
label 7049 INITIALIZE_SPRITES
label 705d ADD_MESSAGE_TO_TELETYPE_Q
label 707e ADD_MESSAGE_TO_Q
label 709f PROCESS_GAME_SELECT_COUNTDOWN_TIMER
label 70ac PUT_GAME_SELECT_COUNTDOWN_DIGIT_MESSAGE_IN_Q2
label 70cd GAME_SELECT_COUNTDOWN_DIGITS
label 7159 ADJUST_SPRITE_Y_IF_FLIPPED_SCREEN
label 7165 ADJUST_SPRITE_X_IF_FLIPPED_SCREEN
label 7200 BACKGROUND_TANK_GAME
label 7980 TANK_COLOR_PALETTE
label 79a0 COLOR_PALETTE_FOR_2?
label 79c0 IO_COLOR_PALETTE
label 7a00 BACKGROUND_IO_TOWER_GAME
label 8180 BACKGROUND_IO_TOWER_AFTER_ENTERING_BEAM
label 8900 BACKGROUND_LC
label 9080 LC_COLOR_PALETTE
label 90c0 COLOR_PALETTE_FOR_GAME_SELECT_AND_MORE
label 9100 BACKGROUND_TRAINING_FOR_LC
label 9884 DATA_TO_?_USED_AT_6954
label 9900 SERVICE_SWITCH_ROUTINE
label 998c GET_TRIGGER_INPUT_FOR_SERVICE_MENU
label 9984 PUT_STRINGS_IN_MESSAGE_Q_FROM_VECTOR_AT_C000_UNTIL_00
label 99a4 GET_IX_FROM_DATA_AT_C000_AND_PUT_STRINGS_IN_MESSAGE_Q_FROM_IX_UNTIL_00
label 99b1 PUT_STRINGS_IN_MESSAGE_Q_FROM_IX_UNTIL_00
label 99ca SERVICE_MENU_CONVERT_ROW_INTO_SPRITE_X_AND_Y_USING_DATA_AT_C000
label 99ea RUN_SERVICE_MENU_ITEM
label 9c14 SOUND_MENU_STRINGS_VECTORSET_DESTINATION_AND_SOURCE
label 9a2e SERVICE_MENU_STRINGS_VECTORSET_DESTINATION_AND_SOURCE
label 9a06 DATA_TO_SET_UP_SERVICE_MENU_SELECT_DESIRED_TEST
label 9a60 SELECT_DESIRED_TEST_S
label 9a74 1_SELF_DIAGNOSTICS_S
label 9a87 2_SOUNDS_S
label 9a90 3_PLAYER_INPUT_S
label 9a9f 4_BOOKKEEPING_S
label 9aad 5_MACHINE_SETUP_S
label 9abd 6_CHANNEL_TEST_S
label 9acc 7_PRESET_S
label 9ad5 8_GRID_DISPLAY_S
label 9ae4 POSITION_CURSOR_BY_USING_S
label 9afd JOYSTICK_UP_AND_DOWN_S
label 9b12 HIT_FIRE_BUTTON_FOR_TEST_S
label 9bd2 SERVICE_MENU_EXIT_CURRENT_LEVEL
label 9c8e SELECT_A_SOUND_S
label 9c9d 1__ALL_SOUNDS_S
label 9cab 2__EXIT_S
label 9cb3 3__THROW_DISK_S
label 9cc1 4__HI_GEAR_HORZ_S
label 9cd1 5__LOW_GEAR_HORZ_S
label 9ce2 6__HI_GEAR_VERT_S
label 9cf2 7__LOW_GEAR_VERT_S
label 9d03 8__MISSILE_FIRE_S
label 9d13 9__BONUS_BASE_S
label 9d21 10__TILT_S
label 9d2a 11__ALL_MCP_BLOCKS_HIT_S
label 9d41 12__IO_TOWER_MUSIC_S
label 9d54 13__COIN_S
label 9d5d 14__SUCCESS_MUSIC_S
label 9d6f 15__FAIL_MUSIC_S
label 9d7e 16__ATTACK_SOUND_S
label 9d8f 17__TANK_HORZ_S
label 9d9d 18__TANK_VERT_S
label 9dab 19__TANK_FIRE_S
label 9db9 20__TANK_BLIP_S
label 9dc7 21__DEREZ_S
label 9dd1 22__MCP_BLIP_S
label 9dde 23__RELOCATE_S
label 9deb 24__TTY_CLATTER_S
label 9dfb 25__TOWER_BEAM_S
label 9e0a 26__TIMER_WARNING_S
label 9e98 BOOKKEEPING_MENU
label 9ee0 DATA_TO_SET_UP_BOOKKEEPING_MENU
label 9f28 SELECT_A_REPORT_OR_EXIT_S
label 9f40 CHUTE__1_COINS_S
label 9f4f CHUTE__2_COINS_S
label 9f5e LONGEST_GAME_S
label 9f6b SHORTEST_GAME_S
label 9f79 HIGHEST_SCORE_S
label 9f87 LOWEST_SCORE_S
label 9f94 BUY_IN_S
label 9f9b TIME_REPORT_S
label 9fa7 SCORE_REPORT_S
label 9fb4 EXIT_S
label 9fbf DISPLAY_BOOKKEEPING_DATA
label a069 CONVERT_HL_TO_6_DIGIT_BCD_AT_IX
label a077 DISPLAY_BCD_FROM_HL_TO_IX_BC_ARE_INPUTS_AND_E_SET_TO_ZERO
label a079 DISPLAY_BCD_FROM_HL_TO_IX_BCE_ARE_INPUTS
label a0b7 DISPLAY_MINUTES_AND_SECONDS_FROM_HL_TO_IX
label a0cd DRAW_TIME_REPORT
label a120 DATA_VECTOR_OF_TIME_REPORT_STRING_DESTINATIONS_AND_SOURCES
label a152 TIME_REPORT2_S
label a15e 0_TO_30_SEC_S
label a16a 30_TO_60_SEC_S
label a177 60_TO_90_SEC_S
label a184 90_TO_120_SEC_S
label a192 120_TO_150_SEC_S
label a1a1 150_TO_180_SEC_S
label a1b0 3_TO_4_MIN_S
label a1bb 4_TO_5_MIN_S
label a1c6 5_TO_6_MIN_S
label a1d1 OVER_6_MIN_S
label a1dc HIT_FIRE_BUTTON_TO_EXIT_S
label a1f4 VECTOR_OF_TIME_REPORT_OUTPUT_POSITIONS
label a208 DRAW_SCORE_REPORT
label a259 SCORE_REPORT_STRINGS
label a28b SCORE_REPORT2_S
label a298 0_TO_5000_PTS_S
label a2a6 5000_TO_10000_PTS_S
label a2b8 10000_TO_20000_PTS_S
label a2cb 20000_TO_30000_PTS_S
label a2de 30000_TO_40000_PTS_S
label a2f1 40000_TO_50000_PTS_S
label a304 50000_TO_75000_PTS_S
label a317 75000_TO_100000_PTS_S
label a32b 100000_TO_150000_PTS_S
label a340 OVER_150000_PTS_S
label a350 VECTOR_OF_SCORE_REPORT_OUTPUT_POSITIONS
label a3e3 CHANNEL_TEST_S
label a3f0 CHANNEL_1_S
label a3fa CHANNEL_2_S
label a404 CHANNEL_3_S
label a40e CHANNEL_4_S
label a418 CHANNEL_5_S
label a422 CHANNEL_6_S
label a462 PLAYER_INPUTS_S
label a470 ACTIVATE_ALL_PLAYER_INPUT_S
label a48a SWITCHES_AND_DEVICES_S
label a49f HIT_TILT_TO_EXIT_S
label a4b0 SERVICE_MENU_PLAYER_INPUTS
label a556 DATA_PLAYER_INPUTS
label a5f9 COIN_CHUTE_1_S
label a608 COIN_CHUTE_2_S
label a617 SERVICE_BUTTON_S
label a628 1_PLAYER_S
label a633 2_PLAYER_S
label a63e PL1_FIRE_S
label a649 PL1_RIGHT_S
label a655 PL1_LEFT_S
label a660 PL1_UP_S
label a669 PL1_DOWN_S
label a674 BUY_IN_ALLOWED_S
label a683 NO_BUY_IN_S
label a694 ROTATE_VALUE_PL_1_S
label a6a8 ROTATE_VALUE_PL_2_S
label a6ba EMPTY_16_SPACES_S
label a6cd MINI_UPRIGHT_S
label a6da COCKTAIL_S
label a6e9 2_COIN_METERS_S
label a6f7 1_COIN_METER_S
label a707 PL2_FIRE_S
label a712 PL2_RIGHT_S
label a71e PL2_LEFT_S
label a729 PL2_UP_S
label a732 PL2_DOWN_S
label a73b SERVICE_MENU_MACHINE_SETUP
label a873 VECTOR_DESTINATIONS_AND_STRINGS_FOR_SETUP_OPTIONS_MENU
label a8bd SETUP_OPTIONS_S
label a8cb COIN_CHUTE_12_S
label a8d8 COINS_FOR_S
label a8e2 CREDITS2_S
label a8ea COIN_CHUTE_22_S
label a8f7 CREDITS_FOR_S
label a903 BASES_S
label a909 1ST_EXTRA_BASE_AT_S
label a91b 000_POINTS_S
label a926 EXIT2_S
label a92b USE_JOYSTICK_UP_AND_S
label a93f DOWN_TO_POSITION_CURSOR_S
label a957 USE_1_AND_2_PLAYER_S
label a96a BUTTONS_TO_ALTER_S
label a97b OPTIONS_S
label a983 DIFFICULTY_LEVEL_S
label aab2 HIT_FIRE_BUTTON_S
label aac2 TO_CONTINUE_S
label aace HIT_FIRE_BUTTON2_S
label aade TO_EXIT_S
label aae6 TEST_AND_INITIALIZE_SYSTEM_AT_BOOT_AND_WHEN_EXITING_SERVICE_MENU
label ab1d DATA_USED_TO_DISPLAY_RAM_ERROR(S)
label ab27 RAM_ERROR_S
label ab31 B2_S
label ab35 F6_S
label abb1 CLEAR_BACKGROUND
label abc3 TEST_RAM
label aca2 PRINT_ERROR_MESSAGES
label acd6 TEST_ROM
label ac6b RAM_TEST_FAILED
label ac70 INFORMATION_USED_TO_RUN_RAM_TEST
label ad15 INFORMATION_USED_TO_RUN_ROM_TEST
label ad3c DATA_USED_TO_DISPLAY_ROM_ERROR(S)
label ad4e ROM_ERROR_S
label ad58 D2_S
label ad5c D3_S
label ad60 D4_S
label ad64 D5_S
label ad68 D6_S
label ad6c D7_S
label ad70 PRINT_A_NULL_TERMINATED_ASCII_STRING_FROM_BC_TO_HL
label ada3 TEST_SOUND_BOARD
label ae2a DATA_TO_TEST_AUDIO_LATCHES
label ae2e INTERFACE_ERROR_S
label ae3e BOARD_TIMEOUT_S
label ae4c SOUND_BOARD_S
label ae58 DATA_USED_TO_DISPLAY_SOUND_ERROR(S)
label ae68 A7_S
label ae6c A8_S
label ae70 A9_S
label ae74 A10_S
label ae79 A6_S
label ae7c DRAW_WHITE_AND_BLACK_CROSSHATCH_PATTERN
label ae95 DATA_TO_DRAW_WHITE_ON_BLACK_CROSSHATCH_PATTERN
label af15 TEST_RAM_AT_MACHINE_INITIALIZATION
label b000 1ST_S
label b004 2ND_S
label b008 PLAYER_1_UP_S
label b014 PLAYER_2_UP_S
label b020 PLAYER_1_S
label b029 EMPTY_3_SPACES_S
label b02d HISCORE_S
label b035 TO_START_GAME_S
label b043 TO_CONTINUE_GAME_S
label b054 PUSH_1_PLAYER_S
label b062 OR_DEPOSIT_S
label b06d INSERT_1_COIN_S
label b07b MORE_COINS_FOR_S
label b08a MORE_COINS_S
label b095 CREDITS_PER_PLAYER_S
label b0a9 OR_PUSH_S
label b0b1 2_PLAYERS_S
label b0bb GAME_OVER_S
label b0c5 EMPTY_9_SPACES_S
label b0cf BONUS_BASES_AWARDED_S
label b0e3 AT_10000_POINTS_S
label b0f3 PRESS_FIRE_BUTTON_S
label b105 FOR_DIRECTIONS_S
label b114 PLAYER_12_S
label b11d PLAYER_2_S
label b126 VECTOR_OF_USER_LEVEL_STRINGS
label b13e RPG_S
label b142 COBOL_S
label b148 BASIC_S
label b14e FORTRAN_S
label b156 SNOBOL_S
label b15d PL1_S
label b161 PASCAL_S
label b168 ALGOL_S
label b16e ASSEMBLY_S
label b177 OS_S
label b17a JCL_S
label b17e USER_S

; MCP
; C004 high bit is 1 unless a disk is fired?
; C013-16 path of disk? changes as disk flies
; C017 inverts when disk fired and then reverts
; C01A-1B change as disk fires
;
; c000 LC_TO_C1DF_IS_TRAILS_4_FOR_TRON_1-3_FOR_ENEMY
; c000 MCP 00-03 legs open, 04-04 legs closed
label c000 CPU_RAM_GS_DISK_X_TANK_X_MCP_TRON_LEGS_LC_TRAILS_TO_C1DF_OR_SCORE_RANKING
label c001 TANK_SPRITE_OR_MCP_ROWS_OF_BLOCKS_OR_BIT_Y
label c002 TANK_Y_OR_GS_DISK_Y_OR_SOLAR_SAILER_X_Y
label c003 SOLAR_SAILER_Y_SERVICE_MENU_ROW
label c004 TANK_ENEMY_DESTROYED_OR_SOLAR_SAILER_STATUS_FLAG_TANK_HITBOX_X_OR_HIGH_SCORE_INITIALS_REMAINING_COUNT
label c005 MCP_STATUS_80_PLAYING_84_DEREZ_88_COMPLETED
label c006 GRID_BUGS_NUMBER_OF_UNUSED_SLOTS_TANK_HITBOX_Y
label c007 MCP_TRON_X_OR_TANKS_DATA_VECTOR_x_1
label c009 MCP_TRON_Y_OR_TANKS_DATA_VECTOR_x_2_OR_GRID_BUGS_FRAMES_TO_DELAY_WHEN_BREEDING
label c00d IO_TOWER_TIMER_VALUE_REVERSED_TO_C010
label c00e INFINITE_TIME_CHEAT
label c010 TANK_DISKS?/BULLETS?_IN_RAM_STARTS_AT_C020
label c012 MCP_DISK_1_DATA/IO_TOWER_TIMER_DIGITS_TO_C019
label c01c MCP_DISK_2_DATA
label c01d IO_TOWER_NUMBER_OF_GRID_BUGS_OR_BOOKKEEPING_TEMPORARY_LOCATION_FOR_6_DIGIT_BCD_VALUES
label c01f TRON_SPRITE_LEGS_APART_COUNTER_0_TO_7
label c022 IO_TOWER_INCREMENTS_19_TO_1E_FOR_EACH_DISK_THROWN
label c023 IO_TOWER_TRIGGER_DEBOUNCE?
label c024 IO_TOWER_STATUS_80_PLAYING_84_DEREZ_88_COMPLETED
label c026 IO_TRON_X_OR_MCP_DISK_3_DATA
label c028 IO_TRON_Y
label c029 JOYSTICK_INPUT_ARRAY_TO_C02C
label c030 IO_TOWER_GRID_BUGS_OR_MCP_DISK_4_DATA
label c031 TANK_ENEMIES_DATA_IS_ACTUALLY_AT_C051
label c03a MCP_DATA_TO_C0D9?
; c051: beginning of enemy tank(s) data.  Each takes up 0x20 bytes
; c051: offsets 0-9? copied from data structures starting at 
; c051: offsets 0,1,2: X, picture, Y
; c051: offsets 3,4,5,6: delta X, delta Y, hitbox size X, hitbox size Y
; c051: offset B: vector to tank data structure
; c051: offset D: offset in B that matches offset 0
; c051: offset 16: vector to sprite(s) for what?
; c051: offset 18: vector to sprite(s) for what?
label c051 INFO_FOR_TANK_GAME_SEE_3ABF_TO_C05A_FOR_A_SINGLE_TANK
label c062 MCP_POSITION_OF_BLOCKS_0_TO_F
label c0dc MCP_TOWER_Y
label c0dd MCP_TOWER_X
label c0e3 MCP_BLOCKS_REMAINING_COUNT
label c0e5 MCP_ROTATION_SPEED_LOWER_IS_FASTER
label c0e6 MCP_BLOCKS_PER_ROW
label c0e7 MCP_Y_SPEED_LOWER_IS_SLOWER
;label c0e8 MCP_DATA_4
label c0e9 MCP_DIRECTION_0_IS_RIGHT
label c108 TANK_ENEMY_BULLETS_IN_RAM_AT_C111
; c111: Enemy bullet(s) data. Each takes up 0x9 bytes
; offset 0: X, sprite, Y
; offset 3: vector to the sprite used for this bullet
; offset 5: X delta, Y delta
; offset 7: initialized to 0
; offset 8: initialized to 0
label c147 TANK_FLAG_GAME_AS_DONE_BIT_7_SET_IF_USER_WON_AND_BIT_0_SET_IF_NOT
label c14a TANK_REMAINING_TANKS
label c14b TANK_2ND_BYTE_FROM_TABLE_AT_4CFF_0_OR_1
label c14c TANK_FRAMES_TO_WAIT_BETWEEN_EACH_USER_EXPLOSION_TRANSITION
label c14d TANK_JOYSTICK_INPUT
label c14e TANK_BYTE_COMPARED_TO_FIRST_BYTE_OF_ENTRIES_AT_3DA5
label c153 TANK_ENEMY_BULLET_FIRED
label C155 TANK_COUNTER_FROM_0_TO_90
label c156 TANK_VECTOR_TO_ATTRACT_MODE_INPUT?
label c159 TANK_INITIAL_NUMBER_OF_TANKS
label c15b TANK_SHOT_SPEED
label c15c TANK_RECOGNIZER_OFFSET_AND_FLAG
label c15f TANK_IF_HARDNESS>0X0B_SEE_COMMENT_AT_3A79
label c1e0 LC_USER_TRAIL_POSITION_VECTOR
label c1e2 LC_ENEMY_1_TRAIL_POSITION_VECTOR
label c1e4 LC_ENEMY_2_TRAIL_POSITION_VECTOR
label c1e6 LC_ENEMY_3_TRAIL_POSITION_VECTOR
label c1e8 TRON_DISKS_DATA_0A_EACH_UP_TO_4
label c1e9 LC_WHICH_LC_TO_DESTROY
label c1ea LC_ENEMY_1_SPRITE
label c1eb LC_ENEMY_2_SPRITE
label c1ec LC_ENEMY_3_SPRITE
label c1ed LC_USER_SPRITE
label c1f7 LC_ENEMY_1_?1
label c1f8 LC_ENEMY_2_?1
label c1f9 LC_ENEMY_3_?1
label c1fa LC_ENEMY_1_?2
label c1fb LC_ENEMY_2_?2
label c1fc LC_ENEMY_3_?2
label c1fd LC_USER_?1
label c1fe LC_USER_?2
label c200 LC_ENEMY_1_X
label c201 LC_ENEMY_2_X
label c202 LC_ENEMY_3_X
label c203 LC_USER_X
label c204 LC_ENEMY_1_Y
label c205 LC_ENEMY_2_Y
label c206 LC_ENEMY_3_Y
label c207 LC_USER_Y
label c209 LC_TRIGGER_PULLED_AND_UP_DOWN_VS_LEFT_RIGHT
label c20b LC_ENEMY_NUMBER_2_BYTES
label c20d LC_TRIGGER_STATE_0_IS_PULLED
label c210 LC_ENEMIES_STILL_ALIVE_BITS_0_1_2
label c218 LC_ENEMIES_DATA_FOR_1?
label c21b LC_ENEMIES_DATA_FOR_2?
label c21e LC_ENEMIES_DATA_FOR_3?
label c223 LC_SETUP2?
label c224 LC_SETUP3?
label c225 LC_SETUP4?
label c226 LC_SETUP5?
label c227 LC_SETUP6?
label c400 KEEP_CODE_SPINNING_UNTIL_INTERRUPT_0_IS_FIRED
label c401 SPINNER_LAST_ADDITION?
label c402 COUNTDOWN_TIMER_SECONDS
label c403 COUNTDOWN_TIMER_FRAMES
label c404 SPINNER_LAST_INPUT
label c405 TRON_ARM_OR_TANK_TURRET_ROTATION
label c40f ATTRACT_MCP_ROTATE_COLORS_IF_NON_ZERO
label c410 MCP_BLOCKS_COLORS_STARTPOINT_VECTOR_INTO_0E55
label c406 MCP_DISK_NUMBER_BEING_PROCESSED
label c407 FLAG_ENTER_INITIALS_DONE_OR_LC_TRON_DIED_OR_TANK_ENEMY_3RD_HIT_OR_VALUE_4_NEXT_SLOT_SCREEN_MESSAGE_Q2
label c408 DO_NOT_FLASH_1ST_OR_2ND_PLAYER_IF_ZERO
label c409 MCP_SPRITE_BLOCK_HIT_BY_DISK
label c40b MCP_RAM_DATA_OF_BLOCK_HIT_BY_DISK_OR_NEW_HIGH_SCORE_LOCATION
label c40d Q_VECTOR_WHERE_TO_PLACE_NEXT_MESSAGE
label c412 COUNTDOWN_TIMER_TO_FLASH_ACTIVE_PLAYER_NUMBER
label c413 ENTER_INITIALS_HIGH_SCORE_BUTTON_DEBOUNCE?
label c414 ENTER_INITIALS_HIGH_SCORE_ROW_SELECTED
label c415 CREDITS_SOMETHING_COPY_OF_C501_OR_ZERO?
label c416 CREDITS_TO_START_A_GAME_NULL_TERMINATED_ASCII_1_OF_3_S_OR_TEMP_BCD_SCORE
label c417 CREDITS_TO_START_A_GAME_NULL_TERMINATED_ASCII_2_OF_3_S
label c418 CREDITS_TO_START_A_GAME_NULL_TERMINATED_ASCII_3_OF_3_S
; c419-c42f current player data
; c430-c445 other player data
label c419 HARDNESS_AND_USER_LEVEL_OR_CURRENT_PLAYER_DATA
label c41a PLAYING_HOW_LONG_NOW_MINUTES
label c41b PLAYING_HOW_LONG_NOW_SECONDS
label c41c PLAYING_HOW_LONG_NOW_FRAMES
label c41d REMAINING_DISKS_AT_A_TIME
label c41e MAX_DISKS_AT_A_TIME
label c41f LIVES_REMAINING
label c420 CURRENT_PLAYER_DATA_BYTE_07
label c421 CURRENT_PLAYER_DATA_BYTE_08
label c422 USER_LEVEL
; starts as 0x0F.  Each completed direction bit unset
label c423 COMPLETED_GAMES_XXXXDURL
label c424 DIRECTION_CHOSEN_8D4U2R1L
; starts as 0x00.  Each attempted direction bit set
label c425 ATTEMPTED_GAMES_XXXXDURL
label c426 VECTOR_OF_GAMES_TO_C42D
label c42e NUMBER_OF_ROUNDS_WHEN_WRAPS_AROUND_DISKS_MAY_GO_TO_1???
label c42f OTHER_PLAYER_DATA
label c435 P2_LIVES_REMAINING 
label c445 PLAYER_1_SCORE
label c44a PLAYER_1_SCORE_LAST_DIGIT
label c44b PLAYER_2_SCORE
label c450 PLAYER_2_SCORE_LAST_DIGIT
label c451 STRING_OUTPUT_DO_IT_IF_NON_ZERO
label c452 STRING_OUTPUT_DESTINATION
label c454 STRING_OUTPUT_SOURCE
label c456 COUNTDOWN_TIMER_BEFORE_STARTING_CODE_AT_C458_WORD
label c458 GS_VECTOR_FOR_NEXT_INSTRUCTION_OR_GAME_WORD
label c45a UNUSED_CODE_SETS_AND_GETS_THE VALUE_BUT_NEVER_CHECKS_RESULTS?
label c45b GS_DIRECTION_DIFFERENT_PER_PLAYER_AND_GAME_ORDER_IN_GAMES_VECTOR?
label c45c POINTER_INTO_COLORS_FOR_CYCLING_COLORS
label c45d COLOR_CYCLING_LIMITER
label c45e DO_COLOR_CYCLING_IF_NON_ZERO
label c45f PLAYER_NUMBER
label c460 NUMBER_OF_PLAYERS
label c461 WHICH_ATTRACT_MODE_INSTRUCTIONS_TO_DISPLAY_VECTOR_LIST_AT_1527
label c462 PREVENT_SERVICE_INTERRUPT_ROUTINE_CTC3_FROM_FINISHING_UNTIL_CTC0_AT_022E_HAS_INTERRUPTED
label c463 SHADOW_CREDITS?
label c464 AUDIO_DISCARD_AUDIO_STACK_BOOLEAN?
label c465 USED_AT_05F8_TO_SKIP_OR_ALTER_PROCESSING_0_1_OR_2
label c466 NUMBER_OF_SCREEN_MESSAGES_FROM_C4D6
label c467 SCREEN_MESSAGE_QUEUE_2_MESSAGE_COUNT_FROM_C4BE
label c468 LAST_STATE_OF_P1_AND_P2_BUTTONS
label c469 ONLY_GET_UPDATED_WHEN_INTERRUPTS_ARE_DISABLED1!
label c46a STRING_OUTPUT_CHARACTERS_COUNT
label c46b ONLY_GET_UPDATED_WHEN_INTERRUPTS_ARE_DISABLED2!
label c46c AUDIO_STACK_COUNT_OF_BYTES_ON_STACK
label c46d AUDIO_TOGGLES_BIT_7_USED_AT_05B2
label c46e AUDIO_SET_TO_78_44_OR_00_USED_AT_05A2_05BA
label c46f TOTAL_COIN_INPUT?
label c470 RIGHT_2_COIN_INPUT?
label c471 ACTIVATE_LEFT_1_COIN_METER_FOR_10_SIRS_ON_COIN_DROP?
label c472 ACTIVATE_RIGHT_2_COIN_METER_FOR_10_SIRS_ON_COIN_DROP?
label c473 LEFT_COIN
label c474 RIGHT_COIN
label c475 SERVICE_CREDIT_SWITCH
label c476 FLIP_SCREEN_AND_COIN_METERS?_STATE
label c477 LEFT_COIN_SOMETHING?
label c478 RIGHT_COIN_SOMETHING?
label c479 SERVICE_CREDIT_SWITCH_SHADOW?
label c47a PSEUDO_RANDOM_VALUE_LAST_GENERATED
label c47b IN_ATTRACT_MODE?
label c47c NEXT_SLOT_IN_SCREEN_MESSAGE_QUEUE_2
label c47d NUMBER_OF_PLAYERS_REMAINING_USED_TO_DECIDE_WHETHER_TO_SWITCH_PLAYERS
label c47e MCP_CONE_COLOR_COUNTER_FOR_6_COLORS
label c47f MCP_CONE_COLOR_COUNTER_FOR_?
label c480 AUDIO_STACK_SP_GROWS_UP
label c482 AUDIO_STACK_BEGINNING_OF_STACK
label c48e ONLY_GET_UPDATED_WHEN_INTERRUPTS_ARE_DISABLED3!
label c490 TELETYPE_Q_BASE_LOCATION?
label c4b8 SCREEN_DESTINATION?
label c4bc SCREEN_MESSAGE_QUEUE_2_NEXT_ENTRY_VECTOR
label c4ba SCREEN_SOURCE?
label c4be SCREEN_MESSAGE_QUEUE_2_TO_C4D5
label c4d6 SCREEN_MESSAGE_QUEUE_NEXT_AVAILABLE_SLOT_TO_C4F1
label C4d8 SCREEN_MESSAGE_QUEUE_START_OF_Q
label c4f0 COIN_CHUTE_1L_COINS
label c4f1 COIN_CHUTE_1L_CREDITS
label c4f2 COIN_CHUTE_2R_COINS
label c4f3 COIN_CHUTE_2R_CREDITS
label c4f4 LIVES_PER_PLAYER_OR_BASES
label c4f5 CREDITS_TO_START_A_GAME
label c4f6 DIFFICULTY_LEVEL
label c4f7 HIGH_SCORES_DIGITS
label c4fd BONUS_PLAYER_AT_XX000_DIGITS_1_OF_2
label c4fe BONUS_PLAYER_AT_XX000_DIGITS_2_OF_2
label c501 CURRENT_CREDITS
label c502 LEFT_1_CREDITS_TRANSIENT_OR_DEBOUNCE?
label c503 RIGHT_2_CREDITS_TRANSIENT_OR_DEBOUNCE?
label c504 HIGH_SCORES_INITIALS_AND_LEVEL
label c506 HIGHEST_SCORES_USER_LEVEL
label c51f HIGH_SCORES_INITIALS_AND_LEVEL_UNDISPLAYED_11TH_SLOT
label c522 HIGH_SCORE_1_OF_3
label c523 HIGH_SCORE_2_OF_3
label c524 HIGH_SCORE_3_OF_3
label c525 CREDITS_TO_START_A_GAME_NULL_TERMINATED_ASCII_2nd_1_OF_3_S
label c526 CREDITS_TO_START_A_GAME_NULL_TERMINATED_ASCII_2nd_2_OF_3_S
label c527 CREDITS_TO_START_A_GAME_NULL_TERMINATED_ASCII_2nd_3_OF_3_S
label c528 LONGEST_GAME_MINUTES
label c529 LONGEST_GAME_SECONDS
label c52A SHORTEST_GAME_MINUTES
label c52B SHORTEST_GAME_SECONDS
label c52c HIGH_SCORES_DIGITS_3BYTES_BCD
label c655 HIGH_SCORE_TABLE_LAST_ENTRY
label c658 SCORE_REPORT_DATA_0_TO_100K_WORDSX10
label c66c TIME_REPORT_DATA_10_WORDS
label c680 LEFT_1_COIN_COUNT
label c682 RIGHT_2_COIN_COUNT
label c684 BUY_IN_COUNT
label c687 FLIP_SCREEN_IF_VALUE_IS_01
label c686 LIVES_PER_PLAYER_OR_BASES_FOR_THIS_GAME
label c7ff RAM_TEST_SPECIAL_CHECK_LOCATION_IF_ZERO_DO_NOT_TEST?

; map(0xc000, 0xc7ff).mirror(0x1800)
label C000 NVRAM
; label C800 NVRAM_M1
; label D000 NVRAM_M2
; label D800 NVRAM_M3
; map(0xe000, 0xe1ff).mirror(0x1600)
; label E000 SPRITE_RAM_M4
; label E200 SPRITE_RAM_M1
; label E400 SPRITE_RAM_M2
; label E600 SPRITE_RAM_M3

; map(0xe800, 0xefff).mirror(0x1000)
; label e800 VIDEO_RAM_MIRROR

label F000 SPRITE_RAM
label F004 SPRITE_TANK_BODY_OR_LC_OR_IO_OR_MCP_TRON_AND_DISK_TORSO_LEGS_LEFT_DISK_RIGHT
label F008 SPRITE_TANK_TURRET_OR_LC_ENEMIES_OR_MCP_TRON_LEGS
label F00C SPRITE_TANK_DISKS_F00C_TO_F01B(SPRITES_3_TO_6)
label f018 SPRITE_TRON_DISKS_1_TO_4
label f01c SPRITE_TANK_WALL_HITS_1_FOR_EACH_DISK
label f028 SPRITE_MCP_BLOCKS_TOP_LEFT_MOVING_DOWN_AND_WRAP_TO_TOP_RIGHT_TO_F09F_OR_BIT
label f029 
label f02c SPRITE_TANK_ENEMIES_OR_SOLAR_SAILER
label f030 SPRITE_IO_GRID_BUGS
label f044 SPRITE_TANK_ENEMY_BULLETS
label f060 SPRITE_TANK_HITS_ON_ENEMIES
label f0a0 SPRITE_MCP_TOWER_TO_F133
; label F200 SPRITE_RAM_M5
; label F400 SPRITE_RAM_M6
; label F600 SPRITE_RAM_M7

label f800 BACKGROUND_VIDEO_RAM_TO_FF7F

label ff80 COLOR_RAM_TO_FFFF

org 0000
commentline 0000 Dissasembly of the Tron 8/9 ROMs used by MAME (labelled as tron)
comment 0000 Z80 starts executing code at 0x0000

commentline 0003 Data used where for what?
data 0003-0007
commentline 0008 Vectors for CTC interrupt channels 0, 1, 2 (not used), and 3
data 0008,4,2
data 0010-006a

ascii 006b-008c

commentline 008d Data used where for what?
data 008d-00ff

commentline 0100 Initialize arcade machine
comment 0100 Disable interrupts
comment 0107 Wait for a little bit (50 loop iterations)
commentline 010e Write 20 bytes to the unknown IO location
comment 0120 Set stack pointer
comment 0132 Set interrupt mode to 2 (external - from CTC)
commentline 016b Initialize interrupt (vector) register to 0

commentline 016f CTC bits:
commentline 016f 7 - Interrupt (1 enables)
commentline 016f 6 - Mode (0 timer/1 counter)
commentline 016f 5 - Prescaler (0 16/ 1 256)
commentline 016f 4 - CLK/TRG Edge Selection (0 falling/1 rising)
commentline 016f 3 - Timer Trigger (0 when loaded/1 pulse starts timer)
commentline 016f 2 - Time Constant (1 time constant follows)
commentline 016f 1 - Reset (0 continuous operation/1 software reset)
commentline 016f 0 - Control or Vector (0 vector/1 control)
commentline 016f Initialize CTC
comment 016f Set interrupt vector to 0x08 (just the top 5 bits are used. Bit zero is always
comment 0171 0 and bits 1 & 2 are set by the CTC based on channel that threw the interrupt)
comment 0173 Set CTC channel 3: Enable interrupts, counter mode, prescaler 16, falling edge,
comment 0175 automatic trigger, time constant follows, software reset, control word
comment 0177 Trigger an interrupt when scanline 493 goes high to do video and other processing during retrace
comment 0179 Set CTC channel 3 time constant: 0x01
comment 017b Set CTC channel 1: Enable interrupts, timer mode, prescaler 256, falling edge,
comment 017d automatic trigger, time constant follows, software reset, control word
comment 0181 Set CTC channel 1 time constant: 0x4E (78) (total timer is 0x4E00 = 19,968 = 8ms?)

data 01ab-01ba

commentline 01bb Data used where for what?
data 01bb-01ca

commentline 01cb CTC channel 3 interrupt vector starts here
commentline 01cb This 

comment 01d5 Set CTC channel 0: Enable interrupts, timer mode, prescaler 16, falling edge,
comment 01d7 automatic trigger, time constant follows, software reset, control word
comment 01db Set CTC channel 0 time constant: 0xBB (187) (total timer is 0x0BB0 = 2,992 = 1.2ms)

commentline 01f6 How long has this user been playing?  C41A = BCD minutes, C41B = BCD seconds,
commentline 01f6 C41C = countdown of 30 frames? (reset to 30 once count goes negative)

commentline 0222 CTC channel 0 interrupt vector starts here
comment 022a Set CTC channel 0: Disable interrupts, timer mode, prescaler 16, falling edge
comment 022c automatic trigger, no time constant, software reset, control word

commentline 0234 CTC channel 1 interrupt vector starts here
commentline 0269 Delay by looping $3000 times.  Why?

commentline 0289 Get spinner value.  Subtract from last. Store last spinner value to C404
commentline 0289 Update turret/arm rotation value: 0 is right,
commentline 0289 increases counter clockwise to 0x23 (#36 )

comment 028d Player 1 spinner input
comment 0292 Player 2 spinner input

commentline 02d9 Turret/arm rotation overflow (0x24) so set to 0

commentline 0335 Ensure flip screen is turned off when a credit is dropped into machine (LEFT_1 coin slot?)
;comment 035d
comment 0383 1 coin meter (DIP switch #1)

commentline 0401 Copy null-terminated string in DE to HL
commentline 040b Output a space character (0x20 or 32)
comment 040b Wasted instruction since next stores #$5E instead of A
commentline 0414 Output a non-space character

comment 045a If space character, go to next character
comment 045e If less than A character, initialize saved data
comment 0462 If greater than Z character, initialize saved data
commentline 0469 Verify C522-C657 each nibble is a BCD digit for high scores and maybe more?
comment 048a Copy 049C-04F5 to C4F0-C549
comment 048d Copy HL to DE for count of BC
comment 0494 Zero out C54A-6C86

commentline 049c Data copied with initial high scores to c4f0
data 049c-04af

commentline 04b0 Default high score initials table. 10x 3 bytes (FI,LI,level)
;data 04b0-04cd
ascii 04b0-04b2
ascii 04b3-04b5
ascii 04b6-04b8
ascii 04b9-04bb
ascii 04bc-04be
ascii 04bf-04c1
ascii 04c2-04c4
ascii 04c5-04c7
ascii 04c8-04ca
ascii 04cb-04cd

commentline 04ce Data copied with initial high scores to c4f0
data 04ce-04f5

ascii 0513-051a

commentline 0597 Reset audio stack
commentline 05c3 MCP cone, if you number colors 0-5 from left to right,
commentline 05c3 Tron surround is color 1 and 
commentline 05c3 MCP cone and wall highlights are color 2
commentline 05c3 Color registers 11, 13, 15, 1B, 1D, 1F correspond to 0-5
commentline 05c3 These are memory addresses:
commentline 05c3 FFA2, FFA6, FFAA, FFB6, FFBA, FFBE (see 05ec)

commentline 05e4 Color RAM: If bit 8 is not set, write to even address. If bit 8 is set
commentline 05e4 inc to next address to write to odd address in order to make A1 high!

data 05ec-05f7

commentline 0606 HISCORE info at the top middle of the screen
commentline 0606 Print HISCORE string
commentline 060f Print the high score
commentline 0618 Player 1 info at top left of screen
commentline 0618 Print 1ST string
commentline 0621 Print 1ST score
commentline 0633 Print 1ST lives remaining
commentline 0646 Player 2 info at top right of screen, if there is a 2nd player
commentline 0646 Print 2ND string
commentline 064f Print 2ND score
commentline 0674 Print active player's score
comment 0674 Set 1ST score destination and source
comment 067e If 1ST player, skip 2ND setup
comment 0680 Set 2ND score destination and source
comment 0689 Set 1ST string destination and source
comment 0693 If 1ST player, skip 2ND setup
comment 0695 Set 2ND string destination and source
commentline 06a2 Reset counter and jump to display active player number
commentline 06a9 If countdown timer is 4 and we should flash, replace active player number with spaces

; Print messages from two different message queue?
commentline 06ca Count @C466 and data starting @C4D8. @C4D6 is next entry for Q
commentline 06ca Each entry is 2 bytes destination & 2 bytes source

commentline 06f5 Count @C467 and data starting @C4BE. @C4BC is next entry for Q
commentline 06f5 Each entry is 2 bytes destination & 2 bytes source

comment 072e Skip leading zeroes in the score

commentline 0730 Output a digit character
commentline 0739 Output a space character (0x20 or 32)
commentline 0740 Finish output of digit
commentline 0743 Advance pointers, and check/set flag to make sure last digit is output!

commentline 074f Color cycling is enabled for all games, but not during game selection
commentline 074f It is only used by Grid bugs (arrows and circle) and
commentline 074f and Tanks (some wall blocks and details running through walls)
commentline 074f 3 color registers are color cycled, but they are all set to the same color at the same time!
commentline 0754 Limit color cycling to every 3rd frame (1/10th of a second)
commentline 075b Update pointer into colors wrapping around, if necessary
commentline 0768 Add pointer to base of colors
commentline 0770 Handle which color RAM byte to write
commentline 0775 Color RAM: if bit 8 is set, write to odd byte. Else write to even byte.
commentline 077a Update colors in registers 0x31, 02, and 04 (FFE2/3, FF84/5, FF88/9)

commentline 0786 Red, Dark red, Dark blue, Blue, Dark green, Green
data 0786,6,2

commentline 07cc FF byte has some special processing, for (c) only
commentline 07cc Put next character (91) instead of ASCII character and 51
commentline 07e7 00 byte falls here

commentline 0834 Is this data? Are the bounds right? Where is this used?
data 0834-08ff

comment 0900 Ensure screen is not flipped for P2
comment 0910 Check service switch

comment 09e8 Buy In not allowed (dip switch #3)
comment 09ee If User Level is > 4, buy in is not allowed! (who knew!  I could not find it in the manual)

comment 0aa0 Switch P1 and P2 data ($16/22 bytes)
comment 0ab7 Check if this is a cocktail
comment 0abb This is an upright/mini so skip the screen flip routine
commentline 0abd Flip the screen
comment 0ad0 Setup P1 up string
comment 0ad3 Get the player number and reverse setting
comment 0ada If P1 is up, skip P2 string setup
comment 0adc P2 is actually up, so replace P1 up string with P2 up string

comment 0b37 Display Tron Copyright screen for FF iterations (if frames, 8.5 seconds?)
data 0b54-0b57

ascii 0b58-0b6a
ascii 0b6b-0b82

data 0b83-0b86

ascii 0b87-0b9a
ascii 0b9b-0bae
ascii 0baf-0bc2

commentline 0bd9 Enough credits to play a game, so throw text to that effect on the screen
comment 0c1c Double space next line of text into the Q
comment 0c30 Double space next line of text into the Q
commentline 0c5e Add "OR DEPOSIT MORE COINS FOR 2 PLAYERS" to the message Q
comment 0c5e Double space next line of text into the Q
commentline 0c78 Add "OR PUSH 2 PLAYERS" to the message Q
commentline 0c8e 1 player start pressed
commentline 0ca2 2 player start pressed
comment 0cf8 Move up 2 lines and right 3 characters

comment 0d22 Set output down 6 rows and 7 columns to the right

comment 0d2e Enable flashing of 1ST or 2ND

commentline 0d52 I/O byte 00, bit 4? (isn't it 7?) is trigger. 0 when trigger is pulled, 1 otherwise
commentline 0d57 Service switch is on!

commentline 0d7c Draw MCP cone tip to sprites 25-37 (0x19-0x25)
commentline 0d9f Draw MCP blocks to sprites 1-24 (0x01-0x18)

commentline 0dc3 24x3 bytes: relative X, relative Y, picture
commentline 0dc3 (0x56 is added to X and 0x80 to Y)
data 0dc3,24,3

commentline 0e0b 13x3 bytes: relative X, relative Y, picture
commentline 0e0b (0x56 is added to X and 0x80 to Y)
data 0e0b,13,3

commentline 0e55 Nybbles: xxxx.xxxR.RRGG.GBBB
commentline 0e55 These are color WORDS!  If bit 8 is set, write the color to the next byte up
commentline 0e55 to set the A0 line high which sets bit 8 in the color WORD RAM.
commentline 0e55 See Bally/Midway's MCR II System manual top-right corner of page MCR-6
commentline 0e55 for more information.  Color table is doubled so wraparound does not
commentline 0e55 need to be calculated or handled.
commentline 0e55 Red, Blue, Green, Yellow (RG), Magenta (RB), Cyan (GB) (and repeat)
data 0e55,12,2
;data 0e55-0e6c

comment 0eac Copy HL to DE for count of BC

commentline 0ebe Data used where for what?
data 0ebe-0eff

comment 0f1a Compare player's score against high score
commentline 0f2b Copy player's score into high score location

comment 0f76 Score is in the top 10, so ...
commentline 0f7f Score is in the top 10, so get initials and save them (from screen RAM!) and user level
comment 0ff6 If Enter Initials timer has run out, jump to finishing routine
comment 0ffc If Enter Initials not completed, loop again

data 1001,6,4
comment 1019 Mark end of vector
data 1019-101a
;data 1001-101a

ascii 101b-1021
ascii 1022-1027
ascii 1028-102c
ascii 102d-1035
ascii 1036-103b
ascii 103c-103f

comment 104a Player 2 so shift joystick input bits
comment 1053 Discard left/right input
comment 105d Joystick up
comment 105f At top of choices already so ignore input
comment 1064 Joystick down
comment 1067 At bottom of choices already so ignore input
;comment 10

commentline 1091 Output a space character (0x20 or 32)
commentline 10e7 Output a space character (0x20 or 32)

ascii 10ed-10f4
ascii 10f5-10fa

commentline 1129 Move initials and user level for positions current players rank-10 down one level
commentline 1143 Get initials from the screen background RAM and place in current players rank position
commentline 115e Get users current level and put into rank position

commentline 1195 Current player score is higher so move this score down a one place

ascii 120c-1216
ascii 1217-1221
ascii 1222-1230
ascii 1231-123b

commentline 1265 Erase last high score character
comment 1268 Ignore erase if no initials have been selected
comment 1269 Increment initials remaining
comment 126d Move a character to the left?
comment 126f Overwrite erased character with a space
commentline 127c End high score input
comment 1282 Already selected max characters so this selection will be ignored
comment 1288 Print the selected character?
commentline 1296 Final initial picked so move the cursor to End

commentline 129e Add player data to the bookkeeping times

commentline 1303 Store playing time into longest game played
commentline 1320 Store playing time into shortest game played

;data 132d-133e
commentline 132d Times for Time Report.  These are words that are minutes and seconds
data 132d,9,2

commentline 133f Add player data to the bookkeeping scores

; bad ascii?
; ascii 134e-1350

commentline 139e Check score against high since machine booted.  Replace, if current score is higher

data 13f7,9,3
;data 13f7-1432
;data 1412-1432
;commentline 1433 Is this a string or an oops?  Remove and merge data?
;ascii 1433-1435
data 1412-14ff

comment 1521 Loop attract mode instructions
data 1527,7,2
;data 1527-1534

comment 1571 Finished outputting the top 10 scores with initials
comment 1577 Handle the extra digit of 10
comment 1579 Output rank number (1-9)
comment 1581 Output rank number 10 - output 0
comment 1589 Move left (backup) one character
comment 158a Output 1
comment 1593 Output 2 initials - move right 3 characters
comment 1597 Setup counters for number of initials and to move right one screen character
comment 15b4 Output score - Move to score, move right one screen character, and set up number of BCD bytes to process
comment 15c3 Process left nybble
comment 15c6 Move high nybble into low nybble
comment 15d2 If not leading zero, jump to output
comment 15da Replace leading zero with a space
comment 15e8 Move right one screen character
comment 15e9 Process right nybble
comment 15ec Mask off low nybble

commentline 15a3 Output a space character (0x20 or 32)
commentline 15aa Output a non-space character

commentline 15c3 print out high scores

;ascii 15e0-15e2

;ascii 1605-1607

comment 1614 Move down two screen characters (double space)
commentline 161c Display user level (programming language)
comment 1620 Position to user level of rank 1
comment 162f Limit User Level to the highest to display (User!)
comment 163e Skip to next user level (skip initials, that have already been output)
comment 1643 Double-space (move down 2 screen lines)
comment 1650 Wait 4 seconds checking for credits added (BC set to $0080 instead of $00C0, see 1535)

ascii 1653-165b
commentline 165c Display title
commentline 1674 Set up sprite(s)
commentline 1693 Send string to Q

ascii 16ab-16b7

commentline 16b8 Tank, Grid Bug, Light Cycle, MCP block, Bit
commentline 16b8 Y, X, sprite, [additional Y, X, sprites], 0 (end marker), text destination vector, text source vector
data 16b8,3,8
data 16d0,1,14
data 16de,1,8
data 16e6-16e6 Mark end of data starting at 16b8
;data 16da-16e6
;ascii 16d7-16d9
;commentline 16da Data used where for what?

ascii 16e7-16f5
ascii 16f6-1704
ascii 1705-1713
ascii 1714-1722
ascii 1723-1731

;data 1766-1787
data 1766,8,4
comment 1786 Mark end of vector
data 1786-1787
comment 1788 Is this data?
data 1788-1789
;data 178a-17b7
data 178a,11,4
comment 17b6 Mark end of vector
data 17b6-17b7
comment 17b8 Is this data?
data 17b8-17b9

ascii 17ba-17ca
ascii 17cb-17d8
ascii 17d9-17ec
ascii 17ed-17ff
ascii 1800-1812
ascii 1813-182b
ascii 182c-183d
ascii 183e-184f
ascii 1850-1868
ascii 1869-1883
ascii 1884-189b
ascii 189c-18b4
ascii 18b5-18c3
ascii 18c4-18de
ascii 18df-18f7
ascii 18f8-1911
ascii 1912-192b
ascii 192c-1935

data 193d,12,4
data 196d-196e Mark end of vector
;data 193d-196e
data 196f-1970

ascii 1971-197a
ascii 197b-198d
ascii 198e-19a2
ascii 19a3-19b7
ascii 19b8-19cb
ascii 19cc-19e3
ascii 19e4-19f6
ascii 19f7-1a08
ascii 1a09-1a12
ascii 1a13-1a27
ascii 1a28-1a3c
ascii 1a3d-1a51

data 1a59,11,4
comment 1a85 Mark end of vector
data 1a85-1a86
comment 1a87 Is this data?
data 1a87-1a88

;data 1a59-1a86
;data 1a87-1a88

ascii 1a89-1a93
ascii 1a94-1aa8
ascii 1aa9-1abe
ascii 1abf-1ad6
ascii 1ad7-1ae9
ascii 1aea-1b02
ascii 1b03-1b19
ascii 1b1a-1b2a
ascii 1b2b-1b41
ascii 1b42-1b5b
ascii 1b5c-1b68

data 1b7a,8,4
comment 1b9a Mark end of vector
data 1b9a-1b9b
comment 1b9c Is this data?
data 1b9c-1b9d

data 1b9e,8,4
comment 1bbe Mark end of vector
data 1bbe-1bbf
comment 1bc0 Is this data?
data 1bc0-1bc1

;data 1b7a-1b9b
;data 1b9c-1b9d
;data 1b9e-1bbf
;data 1bc0-1bc1

ascii 1bc2-1bcf
ascii 1bd0-1bdd
ascii 1bde-1bf2
ascii 1bf3-1c07
ascii 1c08-1c1b
ascii 1c1c-1c2e
ascii 1c2f-1c3f
ascii 1c40-1c47
ascii 1c48-1c5b
ascii 1c5c-1c6b
ascii 1c6c-1c71
ascii 1c72-1c84
ascii 1c85-1c97
ascii 1c98-1ca7
ascii 1ca8-1cb8

data 1cca,8,4
comment 1cea Mark end of vector
data 1cea-1ceb
comment 1cec Is this data?
data 1cec-1ced
data 1cee,7,4
comment 1d0a Mark end of vector
data 1d0a-1d0b
comment 1d0c Is this data?
data 1d0c-1d0d

;data 1cca-1ceb
;data 1cec-1ced
;data 1cee-1d0b
;data 1d0c-1d0d

ascii 1d0e-1d16
ascii 1d17-1d25
ascii 1d26-1d3a
ascii 1d3b-1d4f
ascii 1d50-1d63
ascii 1d64-1d7c
ascii 1d7d-1d91
ascii 1d92-1da2
ascii 1da3-1dbc
ascii 1dbd-1dca
ascii 1dcb-1de2
ascii 1de3-1deb
ascii 1dec-1e05
ascii 1e06-1e10

commentline 1e11 Data for what used where?
data 1e11-1eff

commentline 1fbc if user level > 0, skip game instructions
commentline 1fc2 pick GS instructions to print
comment 1ff2 Enable flashing of 1ST or 2ND

commentline 205c Finished level so set up for the next level (to 2097)
commentline 2070 Increment user level (C422)
commentline 2078 Map the operator selected difficulty level to the internal
commentline 2078 tron hardness level, using the user level as the array index

commentline 20a3 This increment gives the next game an extra disk! Is it a feature or a bug?

commentline 20a7 Vector of map of Difficulty level settings (picked by operator in settings) to how hard
commentline 20a7 each user level is set.  The hardness values range from 0 (easy) to 20 (hard)
commentline 20a7 Difficulty 1 moves from 0 to 20 one at a time.  Difficulty 9 moves 0,4,10,15,20
data 20a7,9,2
;data 20a7-20b8

commentline 20b9 Maps for difficulty 1 to 9 to how hard the levels progress. 21,15,13,10,8,7,7,6,5 bytes
comment 20b9 Difficulty 1
data 20b9-20cd
comment 20ce Difficulty 2
data 20ce-20dc
comment 20dd Difficulty 3
data 20dd-20e9
comment 20ea Difficulty 4
data 20ea-20f3
comment 20f4 Difficulty 5
data 20f4-20fb
comment 20fc Difficulty 6
data 20fc-2102
comment 2103 Difficulty 7
data 2103-2109
comment 210a Difficulty 8
data 210a-210f
comment 2110 Difficulty 9
data 2110-2114

comment 2115 Copy game vectors into RAM
comment 211e Copy HL to DE for count of BC
comment 2120 Randomize the game positions and put them into the resultant 4x vector @ C426
comment 2126 Randomly pick which vector from C004 will go next into the vectors staring @ C426
commentline 2135 Move a vector from C004+A to IX (C426ish)
comment 2149 Move IX to next vector
comment 214d Fill the hole by moving down the remaining vectors, if necessary (if last was picked, no work needed)

commentline 2162 show games on game selection screen

commentline 2207 Modify game selection screen to disable completed and show type of game if already attempted
commentline 2213 4x(3 bytes: ? ? ?). I think it's used to draw the sprites on the game selection screen

commentline 226e Data used at 21a8 and 21b4
data 226e-22ab

commentline 22ac 4x3 bytes for auto game selection: disk X, disk Y,
commentline 22ac what to add to VECTOR_OF_GAMES to use correct 2310 data structure
commentline 22ac The X or Y position is checked against to start that game
data 22ac,4,3
;data 22ac-22b7
commentline 22b8 GS disk delta X & Y data used at 217d
data 22b8,16,2

commentline 22d8 16x3: Direction, vector to data
commentline 22d8 Vectors are: 22b5, 22ac, 22af, 22b2
commentline 22d8 Data used at 1f22
commentline 22d8 I have a hard time understanding why use 16 data structures
commentline 22d8 to point to 4 data structures of directions.  Anyone know?
data 22d8,16,3

commentline 2308 Used at 2115.  Set what game is at what quadrant?  Then 4x vector table.  Then 
data 2308,4,2

commentline 2310 Vector of games to quadrants at C426 points to these blocks of data
commentline 2310 3 vectors: game start, draw sprite(s) for game selection , instructions
commentline 2310 MCP
data 2310,3,2
commentline 2316 IO Tower (Grid Bugs)
data 2316,3,2
commentline 231c LC
data 231c,3,2
commentline 2322 Tank
data 2322,3,2

commentline 2328 X offset, Y offset, picture, 00 end otherwise loop to next sprite
commentline 2328 Draw MCP for game selection screen (3 sprites!  The others are just 1 sprite)
data 2328-2331
commentline 2332 Draw Grid Bug (IO Tower) for game selection screen
data 2332-2335
commentline 2336 Draw LC for game selection screen
data 2336-2339
commentline 233a Draw Tank for game selection screen
data 233a-233d

commentline 233e Locations to draw sprites on game selection screen (LRUD)
commentline 233e 4x: ?, X, Y
data 233e-2349

data 234A-2AC9

data 2aca-2ae9

commentline 2aea Appears to be data to 2BFF?
data 2aea-2bff

comment 2c48 Not sure if all 5 bytes are data or how they're used starting at 6F68
data 2c48-2c4c

ascii 2c4d-2c66
ascii 2c67-2c7d

comment 2c89 Enable flashing of 1ST or 2ND

data 2cee,2,4
comment 2cf6 Mark end of vector
data 2cf6-2cf7

;data 2cee-2cf7

ascii 2cf8-2d04
ascii 2d05-2d11

comment 2d22 Enable flashing of 1ST or 2ND
commentline 2d33 MCP info: C001 gets number of rows (3,4,or 5 based on hardness 0,1-10,11+)
commentline 2d33 Each row has C0E6 number of blocks
commentline 2d33 Register c contains 1C, 1E, or 1F (why? visibility of blocks?)
commentline 2d33 C0E3 ends up with the total number of blocks (C001*0x10)
commentline 2d45 Ensure Hardness for MCP is below $0A

commentline 2d82 Set MCP tower at 40x and 56y
commentline 2d8c Fill $05x$1E of RAM $C063-C0DB with $80 or $00.  Why?
commentline 2d8c Column (6) x Row (5) x 4: 4= X, Y, ?, ? (starts as 80.  Lowest bit set when hit)
commentline 2d8c If a row is empty, the 4 bytes for it are all 00

comment 2e07 Copy HL to DE for count of BC

commentline 2e19 MCP: Tron has gone too far left. Set him to 21 x
commentline 2e21 MCP: Tron has gone too far right. Set him to E7 x

commentline 2ead See 6065 for almost duplicate code!
commentline 2ead MCP and IO Tower structures and code could have been reused
commentline 2ead Tron sprites: 1=torso,2=legs,3=disk arm,5=pointing arm
comment 2ead Load pointer into table of Tron sprite display starting at 367a
comment 2eb1 Load and store X for Tron's torso and legs
comment 2ebb Load and store Y for Tron's torso and legs
comment 2edf Load legs together torso & legs sprites
comment 2ee5 Skip loading legs apart sprites
comment 2ee7 Load legs apart torso & legs sprites
comment 2eed Set sprites for torso and legs
comment 2ef4 Set up pointing arm with correct sprite and offsets
comment 2ef8 Check if Tron is throwing a disk
comment 2f0f Set up throwing disk arm with correct sprite and offsets
comment 2f25 Hide disk to be thrown
comment 2f2b Set up non-throwing disk arm with correct sprite and offsets
comment 2f3f Check if there are any remaining disks to throw
comment 2f43 Skip display of disk
comment 2f45 Display disk that Tron can throw (offset X & Y from Tron)
comment 2f59 Move disk to be thrown offscreen, since there are none remaining (C41D)


commentline 2f5f Derez Tron: Set torso and legs to derez sprite. Set C00F, C00E, and C02D
commentline 2f5f Move arms and disk thrown 0 (1-3 continue flight?) sprite offscreen put #$30 on audio stack
comment 2f79 Disable flashing of 1ST or 2ND
commentline 2faa Flip X on Tron derez sprites

commentline 2fd9 Set initial position and arm rotation of Tron sprites

comment 346a Invincibility MCP Game = 18 (JR *)
comment 3471 Invincibility MCP Game = 11 (LD DE, **)

data 3481-3485

commentline 352a Decrement blocks remaining, change block sprite to explosion (00)
commentline 354f Audio to play for block hit. Number of rows dictates sound used?
commentline 354f When you get to 5 rows, is the wrong sound (@3554) played?
data 354f-3553

data 3554-3558


commentline 3559 5 rows (max) by 6 columns (always) by 3 bytes:
commentline 3559 relative X, relative Y, picture number
data 3559,30,3
;data 3559-35b2

data 35b3,13,3
;data 35b3-35d9

commentline 35da MCP colors: red, blue, green, magenta, yellow, cyan
;data 35da-3639
data 35da,8,12
data 363a,16,4

commentline 367a Identical to 0x2AC (684) byte data structure at 6b79!
commentline 367a Data structure for displaying Tron sprites.  19 (0x13) bytes each!
commentline 367a 0&1:   legs together torso & legs sprites
commentline 367a 2&3:   legs apart torso & legs sprites
commentline 367a 4:     disk arm non-throwing sprite,
commentline 367a 5&6:   disk arm non-throwing X & Y offset,
commentline 367a 7:     disk arm throwing sprite,
commentline 367a 8&9:   disk arm throwing X & Y offset,
commentline 367a a:     pointing arm sprite,
commentline 367a b&c:   pointing arm X & Y offset,
commentline 367a d&e:   disk X & Y offset,
commentline 367a f&10:  throwing delta X (word)
commentline 367a 11&12: throwing delta Y (word)
commentline 367a - 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12
data 367a,36,19

data 3926-3945

commentline 3946 Data used where for what?
data 3946-3965

commentline 3966 Data for setting up MCP cone game by hardness.
commentline 3966 10x4: 4= direction, blocks per row, Y move delay, rotation delay
commentline 3966 plugged into C0E9, C0E6, C0E7, C0E5
data 3966,10,4
;data 3966-398d

commentline 398e Data used where for what?
data 398e-39ff

comment 3a28 Enable flashing of 1ST or 2ND
commentline 3a2b Set up disks (up to 4) in sprites 3-6 (F00C-F01B)

commentline 3a5f Set up wall hit sprites for the disks (up to 4) in sprites 7-A (F01C-F02B)?

commentline 3a79 If hardness above 0x0B (11), subtract 5 from hardness until hardness for
commentline 3a79 this game is =< 0x0B. Increment C for each subtraction. Cap C at 4.
commentline 3a79 Multiply C times 32 and place into C15F

commentline 3aae If bit 7 in number of tanks is set, C15C=0x35

comment 3b3f Set vector to 3 sprites for hits on this tank ($18)
comment 3b45 Ensure the 3 hits are offscreen (X position = 0)
comment 3b50 Set hits remaining to 3 ($11)
comment 3b55 Set vector to sprite for this tank ($16)

commentline 3b76 Setup of enemy tank bullets
commentline 3b76 Sprite is explosion and X=0 and Y=4?

commentline 3ba3 Set up Tron tank (the playa'!)

commentline 3cbe Tank: user died, hide explosion sprite, play sound, and set values to keep screen static until sound completes

comment 3cf4 Enable flashing of 1ST or 2ND

ascii 3d35-3d40
ascii 3d41-3d4c
data 3d4d,11,8
data 3da5,4,4

commentline 3dbb Attract mode input processing ...
commentline 3dda User input processing ...

comment 3f91 Invincibility TANK Game = 18 (JR *) (tank collision?)

commentline 3f9a 21 data blocks used by tanks (Y positions to compare?), variable size so zero terminated
data 3f9a-3f9a
data 3f9b-3f9f
data 3fa0-3fac
data 3fad-3fb1
data 3fb2-3fc4
data 3fc5-3fcb
data 3fcc-3fd8
data 3fd9-3fdd
data 3fde-3fe4
data 3fe5-3ff5
data 3ff6-3fff
data 4000-4010
data 4011-401f
data 4020-4024
data 4025-4035
data 4036-4040
data 4041-404f
data 4050-4054
data 4055-4061
data 4062-4064
data 4065-4065

commentline 4066 This data structure is used at 40C9
commentline 4066 21x3 bytes: X?, vector to other data (Y positions to compare?)
data 4066,21,3

comment 40a5 Enemy tank: B = X position, C = Y position
comment 40a9 Find X position in table at 4066 >= X position in B
comment 40b4 Set HL to vector of Y position data at 4066
comment 40ba Find Y position in table at 4CFF >= Y position in C
comment 40c9 Set BC to vector of X position data at 4CFF

comment 40ed If tank's X position is not 81, skip warp
comment 40f4 If tank's Y position is 7E (top warp), jump to warp
comment 40f8 If tank's Y position is not 91 (bottom warp), skip warp

;data 4127-4144
commentline 4127 Enemy tank: Y position and vector to X positions to compare for turn and ? decisions
data 4127,11,3
commentline 4148 Enemy tank: X position and vector to Y positions to compare for turn and ? decisions
data 4148,10,3
;data 4145-4151
;commentline 4152 Data used by tanks around 4414?  The 3 below are educated guesses at this point
;commentline 4152 11?x3: 3= Type, vector to next data structure
;data 4152-4165
;data 4166-41b1
;data 41b2-420c
;data 4166-4206

commentline 4166 A zero in the data structures below indicates an enemy tank can no longer move in that direction
commentline 4166 I think these can be searched bidirectionally so there are zeroes at both ends

data 4166-416b
data 416c-4177
data 4178-417f
data 4180-4182
data 4183-4189
data 418a-4193
data 4194-4196
data 4197-419e
data 419f-41a8
data 41a9-41b1
data 41b2-41b9
data 41ba-41c0
data 41c1-41cb
data 41cc-41ce
data 41cf-41d8
data 41d9-41e1
data 41e2-41e8
data 41e9-41f3
data 41f4-41fc
data 41fd-4205
data 4206-420c

commentline 4225 Process 2nd hit on enemy tank
comment 4234 Mirror Y of explosion sprite on tank to make it look like fire

commentline 4274 Terminate enemy tank!
commentline 4274 Initialize hit sprites, decrement enemy tanks and return if not zero
comment 428e All tanks destroyed!
comment 42bd Update tank's X position with delta
comment 42c9 Return if tank is not at a crossroad/turn point
comment 42cf Currently going left/up (delta X/Y is FF)?
commentline 42d1 Moving left processing ...
comment 42db Go straight and set next intersection to check (it could be forward or backward in the table)
comment 42e5 If next index is position 00, turn up or down
commentline 42f9 Moving right processing ...
comment 4301 If carry, I am right of user's tank
comment 432a Go down (add 1 to Y)
comment 4334 Go up (add -1 to Y)
comment 4350 Move to the next position (intersection) in the table
comment 4356 Move to the previous position (intersection) in the table
commentline 4380 Moving down processing ...
comment 4388 If carry, I am below user's tank
commentline 43a8 Moving up processing ...

comment 4414 Set tank direction to left/right
comment 4418 Get Y position
comment 4422 Find Y position in table
comment 4429 Put vector into HL and tank's vector at 0B for X positions to compare

comment 4443 Change direction from left/right to up/down
comment 444a Use X position to find table of Y positions to compare

comment 4481 Compare Y positions
comment 4487 Compare X positions
comment 448a Loop through all the tanks we started with.  Must skip dead tanks somehow
comment 449d Both tanks are pointing to the same bullet, so this is me! Don't check against myself!
comment 44a4 Add offset of X (0) or Y (2) into data structure
comment 44ab I am at the intersection previously stored in $0E
comment 44b0 Tanks going similar direction

commentline 44b3 At intersection, so return carry if we are going different directions

comment 44bb Tanks going dissimilar directions

comment 44ca Turn tank right
comment 44d0 Turn tank left
comment 44da Turn tank down
comment 44e0 Turn tank up
comment 44e8 Add Recognizer offset ($35 for Recognizers or $00 for regular tanks)
comment 44f2 Change the offset into the table up or down a position (by adding A to it)

commentline 4508 Update hit sprite based on position of tank
commentline 4508 Flip Y and offset sprite by adding 3 times IX+$08 to X
comment 450d No hits
comment 450f 3 hits
comment 4522 Mirror Y of explosion sprite on tank to make it look like fire

commentline 4531 Update hit sprite based on position of tank
commentline 4531 Flip Y and offset sprite by adding 3 times IX+$08 to Y
comment 4536 No hits
comment 4538 3 hits

comment 4546 Mirror Y of explosion sprite on tank to make it look like fire

commentline 455a Result in HL: get pointer to the correct hit sprite by taking the hit sprites
commentline 455a vector at IX+$18 and add 4 times the remaining hit count (IX+$11) to it

commentline 456d Tanks: C011 is the start of RAM data for disks thrown, size 0x10
commentline 456d The code starts at C001 and pre-adds a size (DE) before processing starts
commentline 456d 0-7: X word, Y word, X delta word, Y delta word, (8 bytes)
commentline 456d 8-F: Disk life (frames counter)?, ?, ?, pointer to sprite for this disk, ?,
commentline 456d Wall hit (frames counter), wall hit sprite number

comment 4580 Decrement wall hit frames counter
commentline 4585 Terminate wall hit.  Hide sprite and update disk.
commentline 45a1 Add deltas to X & Y (word based with carry)

data 45ed-45fe

commentline 46f5 Tanks: C051 is the start of RAM data for enemy tanks, size 0x20
commentline 46f5 The code starts at C031 and pre-adds a size (DE) before processing starts
commentline 46f5 0-9? copied from data structures starting at 
commentline 46f5 0,1,2: X, picture, Y
commentline 46f5 3,4,5,6,7: ? (NOT delta X), ? (NOT delta Y), hitbox size X, hitbox size Y, ?
commentline 46f5 8: delta X or Y, depending on whether tank is moving up/down or left/right
commentline 46f5 9: direction 0 = left/right, 1 = up/down
commentline 46f5 8 & 9: direction - 01 01 = down, FF 00 = left, 01 00 = right, FF 01 = up
commentline 46f5 A: array position of fired bullet.  Copied to offset 08 of bullet
commentline 46f5 B: vector of X or Y positions to compare this tank to (depends on moving left/right or up/down)
commentline 46f5 D: offset into vector at 0B that matches X position (position 0 in this structure)
commentline 46f5 E: next X or Y to check for intersection?
commentline 46f5 10: direction shadow?
commentline 46f5 11: countdown of hits on tank.  Starts at 3 and decrements
commentline 46f5 12: vector to data in 3f9a-4065 (from 4066) (Y positions?)
commentline 46f5 14: vector to data in 4c2c-4cfe (from 4cff) (X positions?)
commentline 46f5 16: vector to sprite for tank
commentline 46f5 18: vector to 3 sprites for hits on enemy tank
commentline 46f5 1A: number of frames to display destroyed tank hits before terminating the enemy tank?
commentline 46f5 Add deltas to X & Y (word based with carry)

comment 473b Invincibility TANK Game = 18 (JR *) (bullet collision?)

commentline 4762 Play hit sound, decrement hits allowed counter, score proper hit,
commentline 4762 flag hit (#$80 to IX+$0F)?, if final hit set tank X to 0 to stop displaying,
commentline 4762 set up HL to point to hit sprite, copy X & Y from tank and set sprite to hit (00)
commentline 4762 set IX+$1A to 08.  Why?

commentline 47b8 Tank hit scores
data 47b8-47bc
data 47bd-47c1
data 47c2-47c6

; commentline 47e2 Position the tank pointed to by IX

comment 4803 Not attract mode so skip attract mode input processing
commentline 4805 Process attract mode input
commentline 4811 Process user input
commentline 4827 Post-input procesing starts here
commentline 484b Initialize disk

; commentline DATA_TO_49C7_USED_AT_49C8
;data 4884-49c7
data 4884,36,9

commentline 49d4 Attract mode input processing ...
commentline 49db User and attract mode processing continues here ...
commentline 49f0 Update turret position and rotation

comment 4ac1 I can fire at the user!
comment 4ac9 Above user tank
comment 4adf Below user tank

comment 4aff Set enemy bullet fired flag
comment 4b0b Multiply A by 9 to offset to correct bullet
comment 4b16 IY will now point to correct bullet
comment 4b1c Bullet already initialized, so return
comment 4b22 Copy bullet number from enemy tank to bullet (redundent to bullet position in memory, maybe?)
comment 4b28 Copy X & Y from enemy tank to bullet
commentline 4b3a Bullet Left/Right
comment 4b3a Set delta Y to zero
comment 4b3e Set delta X from delta X of tank
comment 4b44 bullet right
comment 4b4c bullet left
commentline 4b52 Bullet Up/Down
comment 4b52 Set delta X to zero
comment 4b56 Set delta Y from delta Y of tank
comment 4b5c bullet down
comment 4b64 bullet up

data 4b8d-4b8f

commentline 4b90 Tanks: C111 is enemy tank bullets, size 0x09
commentline 4b90 Starts at C108 and adds size (DE) before processing
commentline 4b90 offset 0: X, sprite, Y
commentline 4b90 offset 3: vector to the sprite used for this bullet
commentline 4b90 offset 5: X delta, Y delta
commentline 4b90 offset 7: Bullet active if non-zero (initialized to 0)
commentline 4b90 offset 8: ? initialized to 0
comment 4ba8 Update bullet position using X delta and Y delta
comment 4bba Load bullet at IY position into BC offsetting from 
comment 4bd5 Ignore enemy bullet collisions with the firing tank

commentline 4bfd Set bullet not active (offset 07), X off screen (offset 00), and call update sprite

comment 4c1e Disable flashing of 1ST or 2ND

commentline 4c2c List of X coordinates to compare once Y has been selected (table at 4cff)
data 4c2c-4c2c
data 4c2d-4c31
data 4c32-4c40
data 4c41-4c47
data 4c48-4c4c
data 4c4d-4c70
;data 4c5e-4c70
data 4c71-4c77
data 4c78-4c8d
;data 4c89-4c8d
data 4c8e-4ca0
data 4ca1-4cad
data 4cae-4cc0
data 4cc1-4cc5
data 4cc6-4cd4
data 4cd5-4cd9
data 4cda-4cef
;data 4ceb-4cef
data 4cf0-4cfa
data 4cfb-4cfd
data 4cfe-4cfe
commentline 4cff Y to compare against tank position?, ? (put in C14B),
commentline 4cff vector to null-terminated data used at ???
commentline 4cff This data structure used at 40BA and 4D77 but points to 4CFB and then adds 4!
data 4cff,30,4

commentline 4d9e This data is copied to C051!
commentline 4d9e number of tanks x 10 bytes
commentline 4d9e 0-2: X, picture, Y,
commentline 4d9e 3,4: unused (copied but then overwritten by byte from 4.  See 3ADB.  Error or change?), ?,
commentline 4d9e 5-7: hitbox size X, hitbox size Y, ?
commentline 4d9e 8: delta X or Y, depending on whether tank is moving up/down or left/right
commentline 4d9e 9: direction 0 = left/right, 1 = up/down
commentline 4d9e tank 0 hardness setup data
data 4d9e,1,10
commentline 4da8 tank 1 hardness setup data
data 4da8,2,10
commentline 4dbc tank 2 hardness setup data
data 4dbc,3,10
commentline 4dda tank 3 hardness setup data
data 4dda,4,10
commentline 4e02 tank 4 hardness setup data
data 4e02,4,10
commentline 4e2a tank 9 hardness setup data
data 4e2a,6,10
commentline 4e66 tank 6 hardness setup data
data 4e66,5,10
commentline 4e98 tank 7 hardness setup data
data 4e98,6,10
commentline 4ed4 tank 8 hardness setup data
data 4ed4,5,10
commentline 4f06 tank 5 hardness setup data
data 4f06,6,10
commentline 4f42 tank A hardness setup data
data 4f42,6,10

commentline 4f7e Tank game setup data.
commentline 4f7e 11x4 bytes: shot speed, number of tanks, vector to tank(s) setup data
commentline 4f7e If high bit (7) set in number of tanks, recognizers instead of tanks

data 4f7e,11,4

data 4faa,16,3

data 4fda-4fff

commentline 5000 Light cycles: the sprite number and orientation is used for some processing
commentline 5000 ----- Enemy User
commentline 5000 Up    2F    2D
commentline 5000 Down  EF    ED
commentline 5000 Left  F0    EE
commentline 5000 Right 30    2E

comment 5019 Enable flashing of 1ST or 2ND
comment 502c LC enemy down (EF)

comment 50bd LC user down (ED)
comment 50c7 LC user up (2D)
comment 50d3 LC user right (2E)
comment 50db LC user left (EE)

comment 5119 Enable flashing of 1ST or 2ND
comment 5128 LC user up (2D)

commentline 5151 5x4: 4 = destination vector and source vector
data 5151,5,4
; 00 00 marks end of data at 5151
data 5165-5166

ascii 5167-5174
ascii 5175-5181
ascii 5182-518b
ascii 518c-519b
ascii 519c-51a9

commentline 523b LC set up user data
commentline 526a LC set up enemy 1 data
commentline 5296 LC set up enemy 2 data
commentline 52c2 LC set up enemy 3 data

comment 53bc LC user up (2D)
comment 5451 LC user up (2D)
comment 5458 LC user down (ED)
comment 545f LC user left (EE)

comment 54c7 Disable flashing of 1ST or 2ND

data 554c-5550

comment 5599 LC user up (2D)
comment 559d LC user down (ED)
comment 55a1 LC user left (EE)
comment 562b LC enemy up (2F)
comment 5631 LC enemy down (EF)
comment 5637 LC enemy right (30)
comment 563f LC enemy left (F0)
comment 5664 LC enemy down (EF)
comment 5689 LC enemy right (30)
comment 56ae LC enemy up (2F)

commentline 56f4 Rotate the data structure right 90 degrees to match what you see on the screen.
commentline 56f4 Each byte has two nybbles, one nybble for each screen background location.
commentline 56f4 0 is no trail; 1,2, & 3 are enemy trails.  4 is User/Tron's trail.
commentline 56f4 Why separate trails for enemies?  Because the separate trail is erased when
commentline 56f4 a LC is destroyed!
commentline 56f4 Tron keeps track of the background RAM location that is being used for
commentline 56f4 each LC trail location.  This location has f800 subtracted, divided by 4 (?),
commentline 56f4 and C000 added to point to the correct location in the RAM data structure.

commentline 56f6 Create right boundary in RAM
commentline 5704 Create left boundary in RAM
commentline 5712 Create top boundary in RAM
commentline 5718 Create bottom boundary in RAM

comment 5768 LC user up (2D)
comment 576e LC user down (ED)
comment 5774 LC user right (2E)

commentline 57ef 1F = Up/down
commentline 57ef 1D = Trigger and up/down
commentline 57ef 0A = Left/right
commentline 57ef 09 = Trigger and left/right
data 57ef-57f2

comment 5812 LC enemy up (2F)
comment 5818 LC enemy down (EF)
comment 581e LC enemy right (30)

comment 5a08 If lowest bit in HL was set (C = true), process upper nybble
comment 5a0a Process lower nybble
comment 5a12 Process upper nybble

commentline 5b62 48x Vectors used at 57ba?
;data 5b62,48,2
data 5b62-5b91
data 5b92-5bc1
data 5bc2-5c01
data 5c02-5c0a
data 5c0b-5c1a

commentline 5c1b cycles hardness data
commentline 5c1b 19x6: enemy LCs (bits 0-2), ?, ?, ?, ?, ?
data 5c1b,19,6

commentline 5c8d Data used where for what?
data 5c8d-5cff

comment 5d0a Enable flashing of 1ST or 2ND

commentline 5d84 Pause for almost one second (2D frames)?

comment 5e3b Enable flashing of 1ST or 2ND
comment 5e6d If zero, no more strings to add to Q
data 5e7e,3,4
comment 5e8a Mark end of IO Tower instructions strings
data 5e8a-5e8b

ascii 5e8c-5e9a
ascii 5e9b-5ea8
ascii 5ea9-5eb6

data 5eb7-5ed6

commentline 5ed7 Data used where for what?
data 5ed7-5ef6

commentline 5f73 IO:0000 - xxxBxxxx
commentline 5f73 IO:0002 - xxxxDURL

comment 5fb3 look at 6b39 for more info!

comment 5fbf Copy HL to DE for count of BC

commentline 6020 To enter IO Tower, Tron 1) Y must be between 2B & 96
commentline 6020 2) X between 4C & B6
commentline 6020 3) Y between 58 & 69 Y
commentline 6020 
comment 6025 Above IO Tower
comment 6029 Below IO Tower

comment 6048 Set IO Tower flag to successfully finish level
comment 6048 (keep everything running except clock, collision, and joystick input)

commentline 604b Add time left in IO Tower to score

commentline 6065 See 2EAD for almost duplicate code!
commentline 6065 MCP and IO Tower structures and code could have been reused
commentline 6065 Tron sprites: 1=torso,2=legs,3=disk arm,5=pointing arm
comment 6072 B now holds Tron X
comment 6076 C now holds Tron Y
comment 607a Set torso Y
comment 6083 Set legs Y
comment 6096 Wrap-around legs apart counter
comment 609b Load legs together sprites
comment 60a3 Load legs apart sprites
comment 60a9 Set torso sprite
comment 60ad Set legs sprite
commentline 60b0 Process pointing arm
comment 60b4 Set X
comment 60be Set Y
comment 60c4 Set sprite
commentline 60c7 Check for ?
commentline 60ce Tron fires his disk here (so don't set up disk in hand, maybe?)
commentline 60d0 Process disk arm when throwing disk
comment 60d4 Set X
comment 60de Set Y
comment 60e4 Set sprite
commentline 60ed Process disk arm when disk in hand
comment 60f1 Set X
comment 60fb Set Y
comment 6101 Set sprite
commentline 6104 Any remaining disks?
commentline 610a Process disk in hand
comment 610e Set X
comment 6118 Set Y
comment 611d Set sprite to 07 (disk/small dot)
commentline 6121 No remaining disks so hide disk in hand sprite (set Y to 0)

commentline 6186 If arm rotation not zero, reverse rotation for data lookup
commentline 618a Multiply A times 19 (HL squared to itself 2x + DE added 3x)

commentline 619f Derez Tron: Set torso and legs to derez sprite. Set C008 and C02D
commentline 619f Move arms and disk thrown 0 (1-3 continue flight?) sprite offscreen put #$30 on audio stack
comment 61b9 Disable flashing of 1ST or 2ND
commentline 61ee Flip X on Tron derez sprites

comment 6279 Copy HL to DE for count of BC

data 62ed-62f1

comment 62fc Set X
comment 6302 Copy Solar Sailer status to B
comment 6306 Copy Bit Y to C
commentline 6307 If high bit in Bit Y is not set, jump to move up (Bit will drop at top of screen)

comment 630b Set sprite to Solar Sailer facing down
comment 6316 Set Y = Y + 2
comment 631b If already dropped Bit, skip to bottom of screen check
commentline 631d Check Bit Y vs Solar Sailer Y.  If not there yet, stop processing (return)
commentline 6321 If not at bottom of screen, stop processing (return)

comment 6326 Set sprite to Solar Sailer facing up
comment 6331 Set Y = Y - 2
comment 6336 If already dropped Bit, skip to top of screen check
commentline 6338 Check Bit Y vs Solar Sailer Y.  If not there yet, stop processing (return)

comment 633d Set X
comment 6346 Set Y
comment 634b Set Bit sprite
comment 6350 Set flag to continue moving Solar Sailer but stop checking to drop Bit

commentline 6354 If not at top of screen, stop processing (return)

commentline 636d Tron disks data C1E8,4,10
commentline 636d 16 bit fields and math?
commentline 636d Does some type of constraining on the X & Y positions
commentline 636d They appear to be edges and maybe the IO tower?
commentline 636d Reverses X or Y if the IO Tower is hit.  What about edges?
commentline 636d 0&1: Disk X
commentline 636d 2&3: Disk Y
commentline 636d 4&5: X delta
commentline 636d 6&7: Y delta
commentline 636d 8: frames left to live
commentline 636d bit 7: skip this disk if 0, bit 0: disk just thrown?
comment 63d1 Set X
comment 641b Set Y

comment 6441 Skip a disk currently in use
comment 644f Copy delta X to disk data
commentline 645f Adjust disk sprite X.  If arm is positive value, add 3.
commentline 645f If arm is negative value, add -1.
comment 646e Set X
comment 647b Copy delta Y to disk data
comment 6487 Set Y
comment 648e Set disk flags
comment 648e Set disk life (24 frames)
comment 649e Set disk X, Y, sprite (07)

comment 6619 Load sprite X & Y into DE
comment 661f Push sprite pointer (IX), data pointer (IY), and sprite X&Y onto stack
data 66ae,9,4
;data 66ae-66d1

comment 66e3 Get grid bug sprite
comment 66e6 grid bug squat
comment 66e8 Jump if grid bug sprite is squat
commentline 66eb Grid bug not squat, so increment grid bug sprite

data 6772-6776

commentline 6777 Only check for Solar Sailer if hardness is > 9
commentline 677e Mask off Solar Sailer possible bit from frames before breeding setting (C009) and skip Solar Sailer
commentline 6785 If Solar Sailer possible bit is not set (bit 7 in first byte of Grid Bugs setup data), skip Solar Sailer
commentline 678a If bit 3 of pseudo random value is not set, skip Solar Sailer
commentline 6791 Set flag to process Solar Sailer
commentline 6796 Randomly pick which side and direction the Solar Sailer will go and place data in C000-C003
comment 67df Data set X of grid bug
comment 67e3 Sprite set X of grid bug
comment 67e7 Data set Y of grid bug
comment 67ed Sprite set Y of grid bug

comment 68c1 Invincibility I/O Tower Game = C9 (RET)

data 68c6-68e1
commentline 68e2 Bit X, Bit Y, Solar Sailer start X, Solar Sailer start Y
commentline 68e2 Right Up, Left Up, Left Down, Right Down
commentline 68e2 If bit 7 of 2nd number is high, moving up.  Else moving down.
commentline 68e2 Solar Sailer will drop bit when Y position = Bit Y
data 68e2,4,4
data 68f2-68fa
data 68fb,9,2

commentline 690d Grid Bugs setup information
commentline 690d First line: setup data
commentline 690d bit 7 permits Solar Sailer + frames to wait before breeding?,
commentline 690d max number of grid bugs, starting number of grid bugs, ?
commentline 690d C006 is set to max - starting grid bugs (2nd - 3rd) = unused grid bug slots
commentline 690d If bit 7 is set on first number (hardness 4, 7, and 8),
commentline 690d get a random number and send solar sailer if bit 3 is set?
commentline 690d Subsequent lines: Set up information for each Grid Bug initially displayed
commentline 690d X, Y, ?, sprite
commentline 690d repeat [number of grid bugs] times ...
commentline 690d Grid bug data array starts at C030 and each entry is 11 (B) bytes long
commentline 690d ?, X, ?, Y, [4 bytes copied from table @66AE], 3rd number per grid bug, ?, 0x80
commentline 690d ?
commentline 690d X
commentline 690d ?
commentline 690d Y
commentline 690d [ 1st of 4 bytes copied from table @66AE]
commentline 690d [2nd]
commentline 690d [3rd]
commentline 690d [4th]
commentline 690d Frames to pause before "breeding" (3rd number per grid bug)
commentline 690d ?
commentline 690d 0x80

commentline 690d IO tower 0 hardness setup data
data 690d-6910
data 6911,3,4
commentline 691d IO tower 1 hardness setup data
data 691d-6920
data 6921,6,4
commentline 6939 IO tower 2 hardness setup data
data 6939-693c
data 693d,9,4
commentline 6961 IO tower 3 hardness setup data
data 6961-6964
data 6965,13,4
commentline 6999 IO tower 4 hardness setup data
data 6999-699c
data 699d,25,4
commentline 6a01 IO tower 5 hardness setup data
data 6a01-6a04
data 6a05,12,4
commentline 6a35 IO tower 6 hardness setup data
data 6a35-6a38
data 6a39,13,4
commentline 6a6d IO tower 7 hardness setup data
data 6a6d-6a70
data 6a71,22,4
commentline 6ac9 IO tower 8 hardness setup data
data 6ac9-6acc
data 6acd,27,4

commentline 6b39 Table of 16x4 bytes used by joystick direction input @5FB3. There are 8 valid
commentline 6b39 inputs (D,U,R,L,DR,DL,UR,UL).  All others (no input or invalid input) are set
commentline 6b39 to all zeroes effectively giving you no input.
data 6b39,16,4

commentline 6b79 Identical to 0x2AC (684) byte data structure at 367a!
commentline 6b79 Data structure for displaying Tron sprites.  19 (0x13) bytes each!
commentline 6b79 0&1:   legs together torso & legs sprites
commentline 6b79 2&3:   legs apart torso & legs sprites
commentline 6b79 4:     disk arm non-throwing sprite,
commentline 6b79 5&6:   disk arm non-throwing X & Y offset,
commentline 6b79 7:     disk arm throwing sprite,
commentline 6b79 8&9:   disk arm throwing X & Y offset,
commentline 6b79 a:     pointing arm sprite,
commentline 6b79 b&c:   pointing arm X & Y offset,
commentline 6b79 d&e:   disk X & Y offset,
commentline 6b79 f&10:  throwing delta X (word)
commentline 6b79 11&12: throwing delta Y (word)
commentline 6b79 - 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 10 11 12
data 6b79,36,19
data 6e25-6eff

commentline 6f20 This line is hit for every tick of the teletype (which strikes twice per character)

commentline 6f25 Could this reverse the direction of disks that strike a wall?

commentline 6f2d Set color RAMs in some way?
commentline 6f35 Another entry point to: Set color RAMs in some way?
commentline 6f3e Color RAM: if bit 8 of word set, write to odd byte. Else, write to even byte

commentline 6f52 Score in HL is 5 bytes, one byte for each digit, reversed!
commentline 6f57 Add 5 digits with carry from HL to 6 digit score pointed to by DE
commentline 6f85 Check for bonus life
commentline 6f9d Process bonus life

commentline 6fc7 Clear background screen (set graphic to 51 and attributes to 5E)
commentline 6fe2 Output a space character (0x20 or 32)
commentline 6fee FDD0 is down 8 lines and 6 characters to the right
commentline 6fff Add a message to the output queue (max of 6) DE is source and BC is destination
commentline 6fff if Q is full, call RESET_WATCHDOG_UNTIL_C400_IS_ONE

comment 7041 Copy HL to DE for count of BC

commentline 7049 Initialize sprites (X=0, picture=3F, Y=0, unused=0)

commentline 7085 message queue 2 is full!  Reset watchdog and spin until MQ2 count < 6

commentline 709f Countdown 30 frames by decrementing c403
commentline 709f Countdown seconds by decrementing c402 every time c403 hits 00

commentline 70ca game select countdown digits vectors
commentline 70ca each digit needs 2 vectors!  Why?  This could be simplified!
data 70cd-70f4
data 70f5-70f9
data 70fa-70fe
data 70ff-7103
data 7104-7108
data 7109-710d
data 710e-7112
data 7113-7117
data 7118-711c
data 711d-7121
data 7122-7126
; got tired of filling these out by hand.  Rest in one block below
data 7127-7158

commentline 7159 Return C687 in A.  If non-zero, subtract 7.  Do not affect other registers.
commentline 7165 Return C687 in A.  If non-zero, subtract 2.  Do not affect other registers.

commentline 7171 Data used by what for why?
data 7171-71ff

data 7200-797F

; Color palette for tanks
data 7980-799F

data 79a0-79bf
data 79c0-79df
data 79e0-79ff

data 7a00-817F

data 8180-88ff

data 8900-907F
data 9080-909F
data 90a0-90bf
data 90c0-90df
data 90e0-90ff

data 9100-987F

commentline 9880 Appears to be 4 bytes of data.  Not sure where it is used.
data 9880-9883

data 9884-98ff

comment 9a06 Pointer to vector of destinations and strings on Service Menu
data 9a06,1,2
comment 9a08 Pointer to sprite positions for service menu
data 9a08,1,2
comment 9a0a Pointer to array of vectors of code to run when a service item is selected
data 9a0a,1,2
comment 9a0c How many items in service menu
data 9a0c-9a0c
comment 9a0d Sprite to indicate selected service item
data 9a0d-9a0d
comment 9a0e Sprite positions service menu
data 9a0e,8,2
comment 9a1e Code vectors to run when item selected
data 9a1e,8,2
data 9a2e,12,4
comment 9a5e Mark end of vector
data 9a5e-9a5f

ascii 9a60-9a73
ascii 9a74-9a86
ascii 9a87-9a8f
ascii 9a90-9a9e
ascii 9a9f-9aac
ascii 9aad-9abc
ascii 9abd-9acb
ascii 9acc-9ad4
ascii 9ad5-9ae3
ascii 9ae4-9afc
ascii 9afd-9b11
ascii 9b12-9b2a

comment 9bd8 Pointer to vector of destinations and strings on Sound Menu
data 9bd8,1,2
comment 9bda Pointer to sprite positions for sound menu
data 9bda,1,2
comment 9bdc Pointer to array of vectors of code to run when a sound menu is selected
data 9bdc,1,2
comment 9bde How many items in sound menu
data 9bde-9bde
comment 9bdf Sprite to indicate sound selected
data 9bdf-9bdf
comment 9be0 Sprite positions sound menu
data 9be0,26,2
data 9c14,30,4
comment 9c8c Mark end of vector
data 9c8c-9c8d

ascii 9c8e-9c9c
ascii 9c9d-9caa
ascii 9cab-9cb2
ascii 9cb3-9cc0
ascii 9cc1-9cd0
ascii 9cd1-9ce1
ascii 9ce2-9cf1
ascii 9cf2-9d02
ascii 9d03-9d12
ascii 9d13-9d20
ascii 9d21-9d29
ascii 9d2a-9d40
ascii 9d41-9d53
ascii 9d54-9d5c
ascii 9d5d-9d6e
ascii 9d6f-9d7d
ascii 9d7e-9d8e
ascii 9d8f-9d9c
ascii 9d9d-9daa
ascii 9dab-9db8
ascii 9db9-9dc6
ascii 9dc7-9dd0
ascii 9dd1-9ddd
ascii 9dde-9dea
ascii 9deb-9dfa
ascii 9dfb-9e09
ascii 9e0a-9e1b

commentline 9e1c Array of vectors to code to execute when a sound is selected
data 9e1c,26,2

data 9e50-9e97

comment 9ee0 Pointer to vector of destinations and strings on Bookkeeping Menu
data 9ee0,1,2
comment 9ee2 Pointer to sprite positions for bookkeeping menu
data 9ee2,1,2
comment 9ee4 Pointer to array of vectors of code to run when a bookkeeping menu is selected
data 9ee4,1,2
comment 9ee6 How many items in bookkeeping menu
data 9ee6-9ee6
comment 9ee7 Sprite to indicate bookkeeping item selected
data 9ee7-9ee7
comment 9ee8 Sprite positions bookkeeping menu
data 9ee8,3,2
data 9eee,14,4
comment 9f26 Mark end of vector
data 9f26-9f27

ascii 9f28-9f3f
ascii 9f40-9f4e
ascii 9f4f-9f5d
ascii 9f5e-9f6a
ascii 9f6b-9f78
ascii 9f79-9f86
ascii 9f87-9f93
ascii 9f94-9f9a
ascii 9f9b-9fa6
ascii 9fa7-9fb3
ascii 9fb4-9fb8

data 9fb9-9fbe

commentline 9fbf Display left 1 coin count
commentline 9fd9 Display right 2 coin count
commentline 9ff3 Display longest game minutes and seconds
commentline 9ffd Display shortest game minutes and seconds
commentline A007 Display highest score
commentline A015 Display lowest score
commentline A023 Display buy in count

comment a03d Number of output BCD bytes
comment a040 Zero out results area
comment a053 Reset carry

commentline a071 BCD bytes to help break down into: number of 10Ks, number of 100s, and number of 1s
data a071,3,2

commentline a077 B = number of digits to display
commentline a077 C = 0, replace leading zeroes with spaces
commentline a077 E != 0, skip first BCD digit?

commentline a08e Replace leading zeroes with spaces unless it's the last zero!
comment a09b Output space
comment a0a6 Output digit
comment a0b1 Move a character to the right

comment a0e3 Get time count into DE
comment a0eb Switch time count into HL

data a120,12,4
data a150-a151

ascii a152-a15d
ascii a15e-a169
ascii a16a-a176
ascii a177-a183
ascii a184-a191
ascii a192-a1a0
ascii a1a1-a1af
ascii a1b0-a1ba
ascii a1bb-a1c5
ascii a1c6-a1d0
ascii a1d1-a1db
ascii a1dc-a1f3

;data a1f4-a207
data a1f4,10,2
comment a215 Output 10 lines in the Score Report
commentline a259 Vectors: Destination, Source
;data a259-a28a
data a259,12,4
comment a289 Mark end of strings for Score Report screen
data a289-a28a

ascii a28b-a297
ascii a298-a2a5
ascii a2a6-a2b7
ascii a2b8-a2ca
ascii a2cb-a2dd
ascii a2de-a2f0
ascii a2f1-a303
ascii a304-a316
ascii a317-a32a
ascii a32b-a33f
ascii a340-a34f

data a350,10,2

comment a3ad Pointer to vector of destinations and strings on Channel Menu
data a3ad,1,2
comment a3af Pointer to sprite positions for channel menu
data a3af,1,2
comment a3b1 Pointer to array of vectors of code to run when a channel menu is selected
data a3b1,1,2
comment a3b3 How many items in channel menu
data a3b3-a3b3
comment a3b4 Sprite to indicate channel selected
data a3b4-a3b4
comment a3b5 Sprite positions channel menu
data a3b5,6,2
data a3c1,7,4
comment a3e1 Mark end of vector
data a3e1-a3e2
;data a3ad-a3e2

ascii a3e3-a3ef
ascii a3f0-a3f9
ascii a3fa-a403
ascii a404-a40d
ascii a40e-a417
ascii a418-a421
ascii a422-a42b

data a450-a461

ascii a462-a46f
ascii a470-a489
ascii a48a-a49e
ascii a49f-a4af

commentline a556 Process spinner if non-zero, IN port, bit(s) to mask,
commentline a556 vector to location to draw on screen, vector to string to add to q
data a556,20,8
data a5f6-a5f6
data a5f7-a5f8
;data a5f7-a5f8

ascii a5f9-a605
data a606-a607
ascii a608-a614
data a615-a616
ascii a617-a625
data a626-a627
ascii a628-a630
data a631-a632
ascii a633-a63b
data a63c-a63d
ascii a63e-a646
data a647-a648
ascii a649-a652
data a653-a654
ascii a655-a65d
data a65e-a65f
ascii a660-a666
data a667-a668
ascii a669-a671
data a672-a673
ascii a674-a682
;data a681-a682
ascii a683-a691
data a692-a693
ascii a694-a6a5
data a6a6-a6a7
ascii a6a8-a6b9
; data a6ba-a6bb
data a6ba-a6ca
data a6cb-a6cc
ascii a6cd-a6d9
; data a6d8-a6d9
ascii a6da-a6e6
data a6e7-a6e8
ascii a6e9-a6f6
;data a6f5-a6f6
ascii a6f7-a704
data a705-a706
ascii a707-a70f
data a710-a711
ascii a712-a71b
data a71c-a71d
ascii a71e-a726
data a727-a728
ascii a729-a72f
data a730-a731
ascii a732-a73a

data a873,18,4
data a8bb-a8bc

ascii a8bd-a8ca
ascii a8cb-a8d7
ascii a8d8-a8e1
ascii a8e2-a8e9
ascii a8ea-a8f6
ascii a8f7-a902
ascii a903-a908
ascii a909-a91a
ascii a91b-a925
ascii a926-a92a
ascii a92b-a93e
ascii a93f-a956
ascii a957-a969
ascii a96a-a97a
ascii a97b-a982
ascii a983-a993

commentline a994 Data for Setup Options service menu
commentline a994 sprite Y, count of bytes to process, RAM position from which to get value(s), where to draw
data a994,8,6
commentline a9c4 Data for ???
data a9c4,10,6
;data a994-a9ff

ascii aab2-aac1
ascii aac2-aacd
ascii aace-aadd
ascii aade-aae5

commentline ab1d 10 bytes: 2x source for RAM ERROR, 2x destination, 2x destination?, 2x RAM@B2 2x RAM@F6
data ab1d-ab26

ascii ab27-ab30
ascii ab31-ab34
ascii ab35-ab38

commentline ab7d Loop 0x1000 (4096) times resetting watchdog

data aba9-abb0

commentline abb1 Clear background (identical to code at 6fdc!
commentline abb1 It appears to not be used.  No calls or jumps to it)
commentline abb7 Output a space character (0x20 or 32)

commentline abc3 Test RAM at C000, C200, C400, C600 (0x0200 each),F800,FC00 (0x0400 each)
commentline abc3 RAM C000-C3FF will be clobbered
commentline abc3 C400-C7FF, F800-FFFF will be preserved
commentline abc3 All size based, copy from src to dst.  Test RAM at src.  Copy from dst to src
commentline abc3 0x0200: C000->C200, C200->C000, C400->C200
commentline abc3 0x01FF: C600->C000
commentline abc3 0x0400: F800->C000, FC00->C000

comment abcd JR if another RAM to process
commentline abd1 Copy RAM from IX+0 sized IX+2 to IX+4

comment abdd Copy HL to DE for count of BC
comment abe7 Set source and size (HL & DE) for 00 & FF RAM test
comment abf5 If destination is 0x0000, JR

commentline abf7 Test RAM from IX+0 sized IX+2 with 00 and FF
comment abfd JP if 00 or FF test fails
comment ac08 Set source and size (HL & DE) for setting RAM to zero
commentline ac16 Zero RAM from IX+0 for size IX+2 (HL & DE)
comment ac08 Set source and size (HL & DE) for walking 1s RAM test
commentline ac38 Walking 1s from IX+0 for size IX+2 (HL & DE)
commentline ac46 Copy RAM from IX+4 sized IX+2 to IX+0

comment ac5a Copy HL to DE for count of BC

commentline ac70 8 bytes: Source vector, Size x2, Destination vector, ? watchdog setting?
commentline ac70     DE    BC    HL   xx  A, @AF22 & @AF34
data ac70,6,8
comment aca0 Marks end of information to test RAMs
data aca0-aca1

comment acdc Load source and size (HL & BC)
comment acea Jump if out of ROMs to checksum
comment aced Compute checksum (just add all the bytes discarding carries)
comment acf8 Jump if checksum matches
comment acfb Add bit of bad ROM to D
commentline ad0b Display ROM errors

commentline ad15 6 bytes: Size x2, Source Vector, checksum, (bit mapped) location
data ad15,6,6
comment ad39 Marks end of information to test ROMs
data ad39-ad3a

comment ad3b is this used or is it just an unused byte between data tables?  Or the checksum byte for this ROM?
data ad3b-ad3b

comment ad3c Vectors to display ROM_ERROR_S: Source, Destination
data ad3c-ad3f
comment ad40 Vectors to display ROM(s) with an error - Destination, Source(s)
data ad40-ad4d

ascii ad4e-ad57
ascii ad58-ad5b
ascii ad5c-ad5f
ascii ad60-ad63
ascii ad64-ad67
ascii ad68-ad6b
ascii ad6c-ad6f

comment ad73 Check for a space character
comment ad77 Output a space character
comment ad7e Output a non-space character
comment ad85 Move right one character

comment add3 Output 00 then FF then 55 then AA to audio latches at 1F 1E 1D 1C
comment ade1 Compare audio status reads to 00 FF 55 AA

data ae2a-ae2d

ascii ae2e-ae3d
ascii ae3e-ae4b
ascii ae4c-ae57

commentline ae58 2x SOUND BOARD, 2x destination, 2x destination of ROM(s), 5x2 bytes: source of sound board devices
comment ae58 Source vector, Destination vector
data ae58-ae5b
comment ae5c Destination vector,  Source vector(s) for sound ROMs and devices
data ae5c-ae67

ascii ae68-ae6b
ascii ae6c-ae6f
ascii ae70-ae73
ascii ae74-ae78
ascii ae79-ae7b

comment ae8f Copy HL to DE for count of BC

data ae95-af14

comment af19 Exit RAM test if C7FF is zero.  How would that ever happen?
comment af30 Not end of RAM to test
comment af32 End of RAM to test
comment af48 Copy HL to DE for count of BC

commentline af4f It looks like data.  I want to figure out what it's for.
data af4f-afff

ascii b000-b003
ascii b004-b007
ascii b008-b013
ascii b014-b01f
ascii b020-b028
data b029-b02c
ascii b02d-b034
ascii b035-b042
ascii b043-b053
ascii b054-b061
ascii b062-b06c
ascii b06d-b07a
ascii b07b-b089
ascii b08a-b094
ascii b095-b0a8
ascii b0a9-b0b0
ascii b0b1-b0ba
ascii b0bb-b0c4
data b0c5-b0ce
ascii b0cf-b0e2
ascii b0e3-b0f2
ascii b0f3-b104
ascii b105-b113
ascii b114-b11c
ascii b11d-b125

commentline B126-B182: Table of User levels. 12 x 2bytes of string location, and then the null-terminated strings.
data b126,12,2
;data b126-b13d
ascii b13e-b141
ascii b142-b147
ascii b148-b14d
ascii b14e-b155
ascii b156-b15c
ascii b15d-b160
ascii b161-b167
ascii b168-b16d
ascii b16e-b176
ascii b177-b179
ascii b17a-b17d
ascii b17e-b182

commentline b183 It looks like data until the end of ROM space
data b183-bfff

; F000-F1FF Sprite RAM (X, picture, Y, unused)
;   Pictures: (bit 7=flipX & 6=flipY)
;   00 = explosion small
; 	01 = explosion large A
; 	02 = explosion large B (only 1 bit looks different from A???)
; 	03 = explosion large C
; 	04 = enemy tank bullet right
; 	05 = enemy tank bullet up
; 	06 = dot large
; 	07 = dot small
; 	08 = enemy tank facing right
; 	09 = enemy tank facing up
; 	0A = tank right
; 	0B = explosion small (looks identical to 00)
; 	0C = BIT!
; 	0D = side of MCP cone?
; 	0E = grid bug egg
; 	0F = grid bug full kick
; 	10 = grid bug half kick
; 	11 = grid bug squat
; 	12 = grid bug lift
; 	13-1C = cannon from tank, left (90 degrees) to up (0 degrees) (10 positions,
;      18 & 19 are 45 degrees and just ever so slightly different)
; 	1D - tron torso and head, legs together
; 	1E - tron legs, together
; 	1F - tron torso and head, legs apart
; 	20 - tron legs, apart
; 	21-2A - tron arm throwing, up (0 degrees) to left (270 degrees) (10 positions)
; 	2B - tron arm other lifted
; 	2C - tron arm other down
; 	2D - enemy light cycle up
; 	2E - enemy light cycle right
; 	2F - light cycle up
; 	30 - light cycle right
; 	31-36 - MCP block left to right (6 positions)
; 	37 - MCP cone block
; 	38 - MCP cone left triangle?
; 	39 - MCP cone right triangle?
; 	3A - tron torso derez
; 	3B - tron legs derez
; 	3C - solar sailer (drops off bit)
; 	3D - Recognizer right
; 	3E - Recognizer up
; 	3F - nothing/empty/null

; F800-FF7F - background RAM.  Starts top right, moves down and then left and up when it wraps around.
; *UNLESS* the screen is inverted for P2 on a cocktail!  Then it starts bottom left, moves up and then
; right and down when it wraps around.  When C687 is 01 the screen is flipped
; One byte picks the character or sprite, the other picks the color palette, flip, reverse, etc.
